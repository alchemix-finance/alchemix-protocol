{
  "address": "0xeE69BD81Bd056339368c97c4B2837B4Dc4b796E7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_alToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract YearnVaultAdapterWithIndirection",
          "name": "adapter",
          "type": "address"
        }
      ],
      "name": "ActiveVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "name": "AlUsdStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUnstaked",
          "type": "uint256"
        }
      ],
      "name": "AlUsdUnstaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Distribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "transmutedBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "transmutedTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountTransmuted",
          "type": "uint256"
        }
      ],
      "name": "ForcedTransmutation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasedValue",
          "type": "uint256"
        }
      ],
      "name": "FundsHarvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawnAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "decreasedValue",
          "type": "uint256"
        }
      ],
      "name": "FundsRecalled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "GovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "keepers",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool[]",
          "name": "states",
          "type": "bool[]"
        }
      ],
      "name": "KeepersSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "migrateTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundsMigrated",
          "type": "uint256"
        }
      ],
      "name": "MigrationComplete",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minUserActionDelay",
          "type": "uint256"
        }
      ],
      "name": "MinUserActionDelayUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "PauseUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernance",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "plantableMargin",
          "type": "uint256"
        }
      ],
      "name": "PlantableMarginUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "plantableThreshold",
          "type": "uint256"
        }
      ],
      "name": "PlantableThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "RewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sentinel",
          "type": "address"
        }
      ],
      "name": "SentinelUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "TokenClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "transmutedTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountTransmuted",
          "type": "uint256"
        }
      ],
      "name": "Transmutation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTransmutationPeriod",
          "type": "uint256"
        }
      ],
      "name": "TransmuterPeriodUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "whitelisted",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "state",
          "type": "bool"
        }
      ],
      "name": "WhitelistSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ZERO_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract YearnVaultAdapterWithIndirection",
          "name": "",
          "type": "address"
        }
      ],
      "name": "adapters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bufferInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_toDistribute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deltaBlocks",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buffer",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "depositedAlTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "origin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "distribute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "dividendsOwing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toTransmute",
          "type": "address"
        }
      ],
      "name": "forceTransmute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "getMultipleUserInfo",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "theUserList",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "theUserData",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultAdapter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "getVaultTotalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract YearnVaultAdapterWithIndirection",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "keepers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDepositBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastDividendPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUserAction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract YearnVaultAdapterWithIndirection",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "migrateTo",
          "type": "address"
        }
      ],
      "name": "migrateFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minUserActionDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plantableMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plantableThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pointMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "realisedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        }
      ],
      "name": "recallAllFundsFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recallFundsFromVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sentinel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_keepers",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_states",
          "type": "bool[]"
        }
      ],
      "name": "setKeepers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minUserActionDelay",
          "type": "uint256"
        }
      ],
      "name": "setMinUserActionDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_pause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "setPendingGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_plantableMargin",
          "type": "uint256"
        }
      ],
      "name": "setPlantableMargin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_plantableThreshold",
          "type": "uint256"
        }
      ],
      "name": "setPlantableThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sentinel",
          "type": "address"
        }
      ],
      "name": "setSentinel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newTransmutationPeriod",
          "type": "uint256"
        }
      ],
      "name": "setTransmutationPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_toWhitelist",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensInBucket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDividendPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAltokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmutationPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuteAndClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transmuteClaimAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedDividends",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "depositedAl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingdivs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "inbucket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realised",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userIsKnown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whiteList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e0ed509f84ff43ae274fd262c403b08e1698846119efa3adbf1a463a1ac1da6",
  "receipt": {
    "to": null,
    "from": "0x0e78588283aA9CcBeC277b40fB8eDfa8Cc2155a7",
    "contractAddress": "0xeE69BD81Bd056339368c97c4B2837B4Dc4b796E7",
    "transactionIndex": 28,
    "gasUsed": "4920035",
    "logsBloom": "0x
    "blockHash": "0x78b2dd3d1b8f3d4bb0c26f2eaab5d6f80a72fc50c3c4cfbdf5aaae04d46134b5",
    "transactionHash": "0x9e0ed509f84ff43ae274fd262c403b08e1698846119efa3adbf1a463a1ac1da6",
    "logs": [],
    "blockNumber": 12921491,
    "cumulativeGasUsed": "6401860",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBC6DA0FE9aD5f3b0d58160288917AA56653660E9",
    "0x6B175474E89094C44Da98b954EedeAC495271d0F",
    "0x0e78588283aA9CcBeC277b40fB8eDfa8Cc2155a7"
  ],
  "solcInputHash": "ae80cdd1dd0b4804f0fd41aa15ceba80",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_alToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ActiveVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"name\":\"AlUsdStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUnstaked\",\"type\":\"uint256\"}],\"name\":\"AlUsdUnstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Distribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmutedBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmutedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransmuted\",\"type\":\"uint256\"}],\"name\":\"ForcedTransmutation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsHarvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"decreasedValue\",\"type\":\"uint256\"}],\"name\":\"FundsRecalled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"keepers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"states\",\"type\":\"bool[]\"}],\"name\":\"KeepersSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"migrateTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsMigrated\",\"type\":\"uint256\"}],\"name\":\"MigrationComplete\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minUserActionDelay\",\"type\":\"uint256\"}],\"name\":\"MinUserActionDelayUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"PauseUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plantableMargin\",\"type\":\"uint256\"}],\"name\":\"PlantableMarginUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"plantableThreshold\",\"type\":\"uint256\"}],\"name\":\"PlantableThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sentinel\",\"type\":\"address\"}],\"name\":\"SentinelUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"TokenClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"transmutedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountTransmuted\",\"type\":\"uint256\"}],\"name\":\"Transmutation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransmutationPeriod\",\"type\":\"uint256\"}],\"name\":\"TransmuterPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"WhitelistSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ZERO_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_toDistribute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deltaBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buffer\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"depositedAlTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"distribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"dividendsOwing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toTransmute\",\"type\":\"address\"}],\"name\":\"forceTransmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"getMultipleUserInfo\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"theUserList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"theUserData\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultAdapter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"getVaultTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"keepers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract YearnVaultAdapterWithIndirection\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"migrateTo\",\"type\":\"address\"}],\"name\":\"migrateFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUserActionDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantableMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plantableThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pointMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"realisedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"}],\"name\":\"recallAllFundsFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recallFundsFromVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentinel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_keepers\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_states\",\"type\":\"bool[]\"}],\"name\":\"setKeepers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUserActionDelay\",\"type\":\"uint256\"}],\"name\":\"setMinUserActionDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_pause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plantableMargin\",\"type\":\"uint256\"}],\"name\":\"setPlantableMargin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_plantableThreshold\",\"type\":\"uint256\"}],\"name\":\"setPlantableThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sentinel\",\"type\":\"address\"}],\"name\":\"setSentinel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newTransmutationPeriod\",\"type\":\"uint256\"}],\"name\":\"setTransmutationPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toWhitelist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensInBucket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDividendPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAltokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmutationPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuteAndClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transmuteClaimAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositedAl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingdivs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inbucket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realised\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userIsKnown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20Burnable} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20Burnable-approve}.\",\"kind\":\"dev\",\"methods\":{\"acceptGovernance()\":{\"details\":\"Accepts the role as governance. This function reverts if the caller is not the new pending governance.\"},\"bufferInfo()\":{\"details\":\"Gets info on the buffer This function is used to query the contract to get the latest state of the buffer\",\"returns\":{\"_buffer\":\"the amount in the buffer \",\"_deltaBlocks\":\"the amount of time since the last phased distribution\",\"_toDistribute\":\"the amount ready to be distributed\"}},\"claim()\":{\"details\":\"claims the base token after it has been transmuted This function reverts if there is no realisedToken balance\"},\"distribute(address,uint256)\":{\"details\":\"Distributes the base token proportionally to all alToken stakers. This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter.  Anyone can call this and add funds, idk why they would do that though...\",\"params\":{\"amount\":\"the amount of base tokens to be distributed to the transmuter.\",\"origin\":\"the account that is sending the tokens to be distributed.\"}},\"dividendsOwing(address)\":{\"returns\":{\"_0\":\"displays the user's share of the pooled alTokens.\"}},\"exit()\":{\"details\":\"Transmutes and unstakes all alTokens This function combines the transmute and unstake functions for ease of use\"},\"forceTransmute(address)\":{\"details\":\"Executes transmute() on another account that has had more base tokens allocated to it than alTokens staked. The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action This function reverts if the address to transmute is not over-filled.\",\"params\":{\"toTransmute\":\"address of the account you will force transmute.\"}},\"getMultipleUserInfo(uint256,uint256)\":{\"details\":\"Gets the status of multiple users in one call This function is used to query the contract to check for accounts that have overfilled positions in order to check  who can be force transmuted.\",\"params\":{\"from\":\"the first index of the userList\",\"to\":\"the last index of the userList returns the userList with their staking status in paginated form. \"}},\"getVaultAdapter(uint256)\":{\"details\":\"Get the adapter of a vault.\",\"params\":{\"_vaultId\":\"the identifier of the vault.\"},\"returns\":{\"_0\":\"the vault adapter.\"}},\"getVaultTotalDeposited(uint256)\":{\"details\":\"Get the total amount of the parent asset that has been deposited into a vault.\",\"params\":{\"_vaultId\":\"the identifier of the vault.\"},\"returns\":{\"_0\":\"the total amount of deposited tokens.\"}},\"harvest(uint256)\":{\"details\":\"Harvests yield from a vault.\",\"params\":{\"_vaultId\":\"the identifier of the vault to harvest from.\"},\"returns\":{\"_0\":\"the amount of funds that were harvested from the vault.\"}},\"initialize(address)\":{\"details\":\"Initializes the contract. This function checks that the transmuter and rewards have been set and sets up the active vault.\",\"params\":{\"_adapter\":\"the vault adapter of the active vault.\"}},\"migrateFunds(address)\":{\"details\":\"Migrates transmuter funds to a new transmuter\",\"params\":{\"migrateTo\":\"address of the new transmuter\"}},\"recallAllFundsFromVault(uint256)\":{\"details\":\"Recalls all planted funds from a target vault\",\"params\":{\"_vaultId\":\"the id of the vault from which to recall funds\"}},\"recallFundsFromVault(uint256,uint256)\":{\"details\":\"Recalls planted funds from a target vault\",\"params\":{\"_amount\":\"the amount of funds to recall\",\"_vaultId\":\"the id of the vault from which to recall funds\"}},\"setKeepers(address[],bool[])\":{\"details\":\"Sets the keeper list This function reverts if the caller is not governance\",\"params\":{\"_keepers\":\"the accounts to set states for.\",\"_states\":\"the accounts states.\"}},\"setMinUserActionDelay(uint256)\":{\"details\":\"Sets the minUserActionDelay  This function reverts if the caller is not the current governance.\",\"params\":{\"_minUserActionDelay\":\"the new min user action delay.\"}},\"setPause(bool)\":{\"details\":\"Sets if the contract should enter emergency exit mode. There are 2 main reasons to pause:     1. Need to shut down deposits in case of an emergency in one of the vaults     2. Need to migrate to a new transmuter While the transmuter is paused, deposit() and distribute() are disabled\",\"params\":{\"_pause\":\"if the contract should enter emergency exit mode.\"}},\"setPendingGovernance(address)\":{\"details\":\"Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.\",\"params\":{\"_pendingGovernance\":\"the new pending governance.\"}},\"setPlantableMargin(uint256)\":{\"details\":\"Sets the plantableThreshold margin for triggering the planting or recalling of funds on harvest This function reverts if the caller is not the current governance.\",\"params\":{\"_plantableMargin\":\"the new plantable margin.\"}},\"setPlantableThreshold(uint256)\":{\"details\":\"Sets the threshold of total held funds above which excess funds will be planted in yield farms. This function reverts if the caller is not the current governance.\",\"params\":{\"_plantableThreshold\":\"the new plantable threshold.\"}},\"setRewards(address)\":{\"details\":\"Sets the rewards contract. This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\",\"params\":{\"_rewards\":\"the new rewards contract.\"}},\"setSentinel(address)\":{\"details\":\"Sets the address of the sentinel\",\"params\":{\"_sentinel\":\"address of the new sentinel\"}},\"setTransmutationPeriod(uint256)\":{\"details\":\"set the transmutationPeriod variable sets the length (in blocks) of one full distribution phase\"},\"setWhitelist(address,bool)\":{\"details\":\"Sets the whitelist This function reverts if the caller is not governance\",\"params\":{\"_state\":\"the whitelist state.\",\"_toWhitelist\":\"the address to alter whitelist permissions.\"}},\"stake(uint256)\":{\"details\":\"Deposits alTokens into the transmuter \",\"params\":{\"amount\":\"the amount of alTokens to stake\"}},\"transmute()\":{\"details\":\"Converts the staked alTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket once the alToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim()     reverts if there are no pendingdivs or tokensInBucket\"},\"transmuteAndClaim()\":{\"details\":\"Transmutes and claims all converted base tokens. This function combines the transmute and claim functions while leaving your remaining alTokens staked.\"},\"transmuteClaimAndWithdraw()\":{\"details\":\"Transmutes, claims base tokens, and withdraws alTokens. This function helps users to exit the transmuter contract completely after converting their alTokens to the base pair.\"},\"unstake(uint256)\":{\"details\":\"Withdraws staked alTokens from the transmuter This function reverts if you try to draw more tokens than you deposited\",\"params\":{\"amount\":\"the amount of alTokens to unstake\"}},\"userInfo(address)\":{\"details\":\"Gets the status of a user's staking position. The total amount allocated to a user is the sum of pendingdivs and inbucket.\",\"params\":{\"user\":\"the address of the user you wish to query. returns user status\"}},\"vaultCount()\":{\"details\":\"Gets the number of vaults in the vault list.\",\"returns\":{\"_0\":\"the vault count.\"}}},\"stateVariables\":{\"_vaults\":{\"details\":\"A list of all of the vaults. The last element of the list is the vault that is currently being used for deposits and withdraws. VaultWithIndirections before the last element are considered inactive and are expected to be cleared.\"},\"adapters\":{\"details\":\"A mapping of adapter addresses to keep track of vault adapters that have already been added\"},\"governance\":{\"details\":\"The address of the account which currently has administrative capabilities over this contract.\"},\"initialized\":{\"details\":\"make sure the contract is only initialized once.\"},\"keepers\":{\"details\":\"addresses whitelisted to run keepr jobs (harvest)\"},\"lastUserAction\":{\"details\":\"mapping of user account to the last block they acted\"},\"minUserActionDelay\":{\"details\":\"number of blocks to delay between allowed user actions\"},\"pause\":{\"details\":\"A flag indicating if deposits and flushes should be halted and if all parties should be able to recall from the active vault.\"},\"pendingGovernance\":{\"details\":\"The address of the pending governance.\"},\"plantableMargin\":{\"details\":\"The % margin to trigger planting or recalling of funds\"},\"plantableThreshold\":{\"details\":\"The threshold above which excess funds will be deployed to yield farming activities\"},\"pointMultiplier\":{\"details\":\"values needed to calculate the distribution of base asset in proportion for alTokens staked\"},\"rewards\":{\"details\":\"The address of the contract which will receive fees.\"},\"sentinel\":{\"details\":\"The address of the account which can perform emergency activities\"},\"whiteList\":{\"details\":\"alchemist addresses whitelisted\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TransmuterB.sol\":\"TransmuterB\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\",\"keccak256\":\"0x9486045e189facd2e868ece35249872598ef03f1087fb6fa4d1161842daa2287\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TransmuterB.sol\":{\"content\":\"pragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/GSN/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interfaces/IERC20Burnable.sol\\\";\\nimport {YearnVaultAdapterWithIndirection} from \\\"./adapters/YearnVaultAdapterWithIndirection.sol\\\";\\nimport {VaultWithIndirection} from \\\"./libraries/alchemist/VaultWithIndirection.sol\\\";\\nimport {ITransmuter} from \\\"./interfaces/ITransmuter.sol\\\";\\n\\n//    ___    __        __                _               ___                              __         _ \\n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\\\  ____ ___   ___ ___   ___  / /_  ___  (_)\\n//  / __ | / / / __/ / _ \\\\/ -_) /  ' \\\\ / /  \\\\ \\\\ /      / ___/ / __// -_) (_-</ -_) / _ \\\\/ __/ (_-< _\\n// /_/ |_|/_/  \\\\__/ /_//_/\\\\__/ /_/_/_//_/  /_\\\\_\\\\      /_/    /_/   \\\\__/ /___/\\\\__/ /_//_/\\\\__/ /___/(_)\\n//\\n// .___________..______           ___      .__   __.      _______..___  ___.  __    __  .___________. _______ .______\\n// |           ||   _  \\\\         /   \\\\     |  \\\\ |  |     /       ||   \\\\/   | |  |  |  | |           ||   ____||   _  \\\\\\n// `---|  |----`|  |_)  |       /  ^  \\\\    |   \\\\|  |    |   (----`|  \\\\  /  | |  |  |  | `---|  |----`|  |__   |  |_)  |\\n//     |  |     |      /       /  /_\\\\  \\\\   |  . `  |     \\\\   \\\\    |  |\\\\/|  | |  |  |  |     |  |     |   __|  |      /\\n//     |  |     |  |\\\\  \\\\----. /  _____  \\\\  |  |\\\\   | .----)   |   |  |  |  | |  `--'  |     |  |     |  |____ |  |\\\\  \\\\----.\\n//     |__|     | _| `._____|/__/     \\\\__\\\\ |__| \\\\__| |_______/    |__|  |__|  \\\\______/      |__|     |_______|| _| `._____|\\n/**\\n * @dev Implementation of the {IERC20Burnable} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20Burnable-approve}.\\n */\\ncontract TransmuterB is Context {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20Burnable;\\n    using Address for address;\\n    using VaultWithIndirection for VaultWithIndirection.Data;\\n    using VaultWithIndirection for VaultWithIndirection.List;\\n\\n    address public constant ZERO_ADDRESS = address(0);\\n    uint256 public transmutationPeriod;\\n\\n    address public alToken;\\n    address public token;\\n\\n    mapping(address => uint256) public depositedAlTokens;\\n    mapping(address => uint256) public tokensInBucket;\\n    mapping(address => uint256) public realisedTokens;\\n    mapping(address => uint256) public lastDividendPoints;\\n\\n    mapping(address => bool) public userIsKnown;\\n    mapping(uint256 => address) public userList;\\n    uint256 public nextUser;\\n\\n    uint256 public totalSupplyAltokens;\\n    uint256 public buffer;\\n    uint256 public lastDepositBlock;\\n\\n    ///@dev values needed to calculate the distribution of base asset in proportion for alTokens staked\\n    uint256 public pointMultiplier = 10e18;\\n\\n    uint256 public totalDividendPoints;\\n    uint256 public unclaimedDividends;\\n\\n    /// @dev alchemist addresses whitelisted\\n    mapping (address => bool) public whiteList;\\n\\n    /// @dev addresses whitelisted to run keepr jobs (harvest)\\n    mapping (address => bool) public keepers;\\n\\n    /// @dev The threshold above which excess funds will be deployed to yield farming activities\\n    uint256 public plantableThreshold = 5000000000000000000000000; // 5mm\\n\\n    /// @dev The % margin to trigger planting or recalling of funds\\n    uint256 public plantableMargin = 5;\\n\\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\\n    address public governance;\\n\\n    /// @dev The address of the pending governance.\\n    address public pendingGovernance;\\n\\n    /// @dev The address of the account which can perform emergency activities\\n    address public sentinel;\\n\\n    /// @dev A flag indicating if deposits and flushes should be halted and if all parties should be able to recall\\n    /// from the active vault.\\n    bool public pause;\\n\\n    /// @dev The address of the contract which will receive fees.\\n    address public rewards;\\n\\n    /// @dev A mapping of adapter addresses to keep track of vault adapters that have already been added\\n    mapping(YearnVaultAdapterWithIndirection => bool) public adapters;\\n\\n    /// @dev A list of all of the vaults. The last element of the list is the vault that is currently being used for\\n    /// deposits and withdraws. VaultWithIndirections before the last element are considered inactive and are expected to be cleared.\\n    VaultWithIndirection.List private _vaults;\\n\\n    /// @dev make sure the contract is only initialized once.\\n    bool public initialized;\\n\\n    /// @dev mapping of user account to the last block they acted\\n    mapping(address => uint256) public lastUserAction;\\n\\n    /// @dev number of blocks to delay between allowed user actions\\n    uint256 public minUserActionDelay;\\n\\n    event GovernanceUpdated(\\n        address governance\\n    );\\n\\n    event PendingGovernanceUpdated(\\n        address pendingGovernance\\n    );\\n\\n    event SentinelUpdated(\\n        address sentinel\\n    );\\n\\n    event TransmuterPeriodUpdated(\\n        uint256 newTransmutationPeriod\\n    );\\n\\n    event TokenClaimed(\\n        address claimant,\\n        address token,\\n        uint256 amountClaimed\\n    );\\n\\n    event AlUsdStaked(\\n        address staker,\\n        uint256 amountStaked\\n    );\\n\\n    event AlUsdUnstaked(\\n        address staker,\\n        uint256 amountUnstaked\\n    );\\n\\n    event Transmutation(\\n        address transmutedTo,\\n        uint256 amountTransmuted\\n    );\\n\\n    event ForcedTransmutation(\\n        address transmutedBy,\\n        address transmutedTo,\\n        uint256 amountTransmuted\\n    );\\n\\n    event Distribution(\\n        address origin,\\n        uint256 amount\\n    );\\n\\n    event WhitelistSet(\\n        address whitelisted,\\n        bool state\\n    );\\n\\n    event KeepersSet(\\n        address[] keepers,\\n        bool[] states\\n    );\\n\\n    event PlantableThresholdUpdated(\\n        uint256 plantableThreshold\\n    );\\n    \\n    event PlantableMarginUpdated(\\n        uint256 plantableMargin\\n    );\\n\\n    event MinUserActionDelayUpdated(\\n        uint256 minUserActionDelay\\n    );\\n\\n    event ActiveVaultUpdated(\\n        YearnVaultAdapterWithIndirection indexed adapter\\n    );\\n\\n    event PauseUpdated(\\n        bool status\\n    );\\n\\n    event FundsRecalled(\\n        uint256 indexed vaultId,\\n        uint256 withdrawnAmount,\\n        uint256 decreasedValue\\n    );\\n\\n    event FundsHarvested(\\n        uint256 withdrawnAmount,\\n        uint256 decreasedValue\\n    );\\n\\n    event RewardsUpdated(\\n        address treasury\\n    );\\n\\n    event MigrationComplete(\\n        address migrateTo,\\n        uint256 fundsMigrated\\n    );\\n\\n    constructor(address _alToken, address _token, address _governance) public {\\n        require(_governance != ZERO_ADDRESS, \\\"Transmuter: 0 gov\\\");\\n        governance = _governance;\\n        alToken = _alToken;\\n        token = _token;\\n        transmutationPeriod = 500000;\\n        minUserActionDelay = 1;\\n        pause = true;\\n    }\\n\\n    ///@return displays the user's share of the pooled alTokens.\\n    function dividendsOwing(address account) public view returns (uint256) {\\n        uint256 newDividendPoints = totalDividendPoints.sub(lastDividendPoints[account]);\\n        return depositedAlTokens[account].mul(newDividendPoints).div(pointMultiplier);\\n    }\\n\\n    /// @dev Checks that caller is not a eoa.\\n    ///\\n    /// This is used to prevent contracts from interacting.\\n    modifier noContractAllowed() {\\n            require(!address(msg.sender).isContract() && msg.sender == tx.origin, \\\"no contract calls\\\");\\n        _;\\n    }\\n\\n    ///@dev modifier to fill the bucket and keep bookkeeping correct incase of increase/decrease in shares\\n    modifier updateAccount(address account) {\\n        uint256 owing = dividendsOwing(account);\\n        if (owing > 0) {\\n            unclaimedDividends = unclaimedDividends.sub(owing);\\n            tokensInBucket[account] = tokensInBucket[account].add(owing);\\n        }\\n        lastDividendPoints[account] = totalDividendPoints;\\n        _;\\n    }\\n    ///@dev modifier add users to userlist. Users are indexed in order to keep track of when a bond has been filled\\n    modifier checkIfNewUser() {\\n        if (!userIsKnown[msg.sender]) {\\n            userList[nextUser] = msg.sender;\\n            userIsKnown[msg.sender] = true;\\n            nextUser++;\\n        }\\n        _;\\n    }\\n\\n    ///@dev run the phased distribution of the buffered funds\\n    modifier runPhasedDistribution() {\\n        uint256 _lastDepositBlock = lastDepositBlock;\\n        uint256 _currentBlock = block.number;\\n        uint256 _toDistribute = 0;\\n        uint256 _buffer = buffer;\\n\\n        // check if there is something in bufffer\\n        if (_buffer > 0) {\\n            // NOTE: if last deposit was updated in the same block as the current call\\n            // then the below logic gates will fail\\n\\n            //calculate diffrence in time\\n            uint256 deltaTime = _currentBlock.sub(_lastDepositBlock);\\n\\n            // distribute all if bigger than timeframe\\n            if(deltaTime >= transmutationPeriod) {\\n                _toDistribute = _buffer;\\n            } else {\\n\\n                //needs to be bigger than 0 cuzz solidity no decimals\\n                if(_buffer.mul(deltaTime) > transmutationPeriod)\\n                {\\n                    _toDistribute = _buffer.mul(deltaTime).div(transmutationPeriod);\\n                }\\n            }\\n\\n            // factually allocate if any needs distribution\\n            if(_toDistribute > 0){\\n\\n                // remove from buffer\\n                buffer = _buffer.sub(_toDistribute);\\n\\n                // increase the allocation\\n                increaseAllocations(_toDistribute);\\n            }\\n        }\\n\\n        // current timeframe is now the last\\n        lastDepositBlock = _currentBlock;\\n        _;\\n    }\\n\\n    /// @dev A modifier which checks if whitelisted for minting.\\n    modifier onlyWhitelisted() {\\n        require(whiteList[msg.sender], \\\"Transmuter: !whitelisted\\\");\\n        _;\\n    }\\n\\n    /// @dev A modifier which checks if caller is a keepr.\\n    modifier onlyKeeper() {\\n        require(keepers[msg.sender], \\\"Transmuter: !keeper\\\");\\n        _;\\n    }\\n\\n    /// @dev Checks that the current message sender or caller is the governance address.\\n    ///\\n    ///\\n    modifier onlyGov() {\\n        require(msg.sender == governance, \\\"Transmuter: !governance\\\");\\n        _;\\n    }\\n\\n    /// @dev checks that the block delay since a user's last action is longer than the minium delay\\n    ///\\n    modifier ensureUserActionDelay() {\\n        require(block.number.sub(lastUserAction[msg.sender]) >= minUserActionDelay, \\\"action delay not met\\\");\\n        lastUserAction[msg.sender] = block.number;\\n        _;\\n    }\\n\\n    ///@dev set the transmutationPeriod variable\\n    ///\\n    /// sets the length (in blocks) of one full distribution phase\\n    function setTransmutationPeriod(uint256 newTransmutationPeriod) public onlyGov() {\\n        transmutationPeriod = newTransmutationPeriod;\\n        emit TransmuterPeriodUpdated(transmutationPeriod);\\n    }\\n\\n    ///@dev claims the base token after it has been transmuted\\n    ///\\n    ///This function reverts if there is no realisedToken balance\\n    function claim() \\n        public\\n        noContractAllowed()\\n    {\\n        address sender = msg.sender;\\n        require(realisedTokens[sender] > 0);\\n        uint256 value = realisedTokens[sender];\\n        realisedTokens[sender] = 0;\\n        ensureSufficientFundsExistLocally(value);\\n        IERC20Burnable(token).safeTransfer(sender, value);\\n        emit TokenClaimed(sender, token, value);\\n    }\\n\\n    ///@dev Withdraws staked alTokens from the transmuter\\n    ///\\n    /// This function reverts if you try to draw more tokens than you deposited\\n    ///\\n    ///@param amount the amount of alTokens to unstake\\n    function unstake(uint256 amount) \\n        public\\n        noContractAllowed()\\n        updateAccount(msg.sender)\\n    {\\n        // by calling this function before transmuting you forfeit your gained allocation\\n        address sender = msg.sender;\\n        require(depositedAlTokens[sender] >= amount,\\\"Transmuter: unstake amount exceeds deposited amount\\\");\\n        depositedAlTokens[sender] = depositedAlTokens[sender].sub(amount);\\n        totalSupplyAltokens = totalSupplyAltokens.sub(amount);\\n        IERC20Burnable(alToken).safeTransfer(sender, amount);\\n        emit AlUsdUnstaked(sender, amount);\\n    }\\n    ///@dev Deposits alTokens into the transmuter \\n    ///\\n    ///@param amount the amount of alTokens to stake\\n    function stake(uint256 amount)\\n        public\\n        noContractAllowed()\\n        ensureUserActionDelay()\\n        runPhasedDistribution()\\n        updateAccount(msg.sender)\\n        checkIfNewUser()\\n    {\\n        require(!pause, \\\"emergency pause enabled\\\");\\n\\n        // requires approval of AlToken first\\n        address sender = msg.sender;\\n        //require tokens transferred in;\\n        IERC20Burnable(alToken).safeTransferFrom(sender, address(this), amount);\\n        totalSupplyAltokens = totalSupplyAltokens.add(amount);\\n        depositedAlTokens[sender] = depositedAlTokens[sender].add(amount);\\n        emit AlUsdStaked(sender, amount);\\n    }\\n    /// @dev Converts the staked alTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket\\n    ///\\n    /// once the alToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim()    \\n    ///\\n    /// reverts if there are no pendingdivs or tokensInBucket\\n    function transmute() \\n        public \\n        noContractAllowed()\\n        ensureUserActionDelay()\\n        runPhasedDistribution() \\n        updateAccount(msg.sender) {\\n        address sender = msg.sender;\\n        uint256 pendingz = tokensInBucket[sender];\\n        uint256 diff;\\n\\n        require(pendingz > 0, \\\"need to have pending in bucket\\\");\\n\\n        tokensInBucket[sender] = 0;\\n\\n        // check bucket overflow\\n        if (pendingz > depositedAlTokens[sender]) {\\n            diff = pendingz.sub(depositedAlTokens[sender]);\\n\\n            // remove overflow\\n            pendingz = depositedAlTokens[sender];\\n        }\\n\\n        // decrease altokens\\n        depositedAlTokens[sender] = depositedAlTokens[sender].sub(pendingz);\\n\\n        // BURN ALTOKENS\\n        IERC20Burnable(alToken).burn(pendingz);\\n\\n        // adjust total\\n        totalSupplyAltokens = totalSupplyAltokens.sub(pendingz);\\n\\n        // reallocate overflow\\n        increaseAllocations(diff);\\n\\n        // add payout\\n        realisedTokens[sender] = realisedTokens[sender].add(pendingz);\\n\\n        emit Transmutation(sender, pendingz);\\n    }\\n\\n    /// @dev Executes transmute() on another account that has had more base tokens allocated to it than alTokens staked.\\n    ///\\n    /// The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action\\n    ///\\n    /// This function reverts if the address to transmute is not over-filled.\\n    ///\\n    /// @param toTransmute address of the account you will force transmute.\\n    function forceTransmute(address toTransmute)\\n        public\\n        noContractAllowed()\\n        ensureUserActionDelay()\\n        runPhasedDistribution()\\n        updateAccount(msg.sender)\\n        updateAccount(toTransmute)\\n        checkIfNewUser()\\n    {\\n        //load into memory\\n        address sender = msg.sender;\\n        uint256 pendingz = tokensInBucket[toTransmute];\\n        // check restrictions\\n        require(\\n            pendingz > depositedAlTokens[toTransmute],\\n            \\\"Transmuter: !overflow\\\"\\n        );\\n\\n        // empty bucket\\n        tokensInBucket[toTransmute] = 0;\\n\\n        // calculaate diffrence\\n        uint256 diff = pendingz.sub(depositedAlTokens[toTransmute]);\\n\\n        // remove overflow\\n        pendingz = depositedAlTokens[toTransmute];\\n\\n        // decrease altokens\\n        depositedAlTokens[toTransmute] = 0;\\n\\n        // BURN ALTOKENS\\n        IERC20Burnable(alToken).burn(pendingz);\\n        // adjust total\\n        totalSupplyAltokens = totalSupplyAltokens.sub(pendingz);\\n\\n        // reallocate overflow\\n        tokensInBucket[sender] = tokensInBucket[sender].add(diff);\\n\\n        // add payout\\n        realisedTokens[toTransmute] = realisedTokens[toTransmute].add(pendingz);\\n\\n        uint256 value = realisedTokens[toTransmute];\\n\\n        ensureSufficientFundsExistLocally(value);\\n\\n        // force payout of realised tokens of the toTransmute address\\n        realisedTokens[toTransmute] = 0;\\n        IERC20Burnable(token).safeTransfer(toTransmute, value);\\n        emit ForcedTransmutation(sender, toTransmute, value);\\n    }\\n\\n    /// @dev Transmutes and unstakes all alTokens\\n    ///\\n    /// This function combines the transmute and unstake functions for ease of use\\n    function exit() public noContractAllowed() {\\n        transmute();\\n        uint256 toWithdraw = depositedAlTokens[msg.sender];\\n        unstake(toWithdraw);\\n    }\\n\\n    /// @dev Transmutes and claims all converted base tokens.\\n    ///\\n    /// This function combines the transmute and claim functions while leaving your remaining alTokens staked.\\n    function transmuteAndClaim() public noContractAllowed() {\\n        transmute();\\n        claim();\\n    }\\n\\n    /// @dev Transmutes, claims base tokens, and withdraws alTokens.\\n    ///\\n    /// This function helps users to exit the transmuter contract completely after converting their alTokens to the base pair.\\n    function transmuteClaimAndWithdraw() public noContractAllowed() {\\n        transmute();\\n        claim();\\n        uint256 toWithdraw = depositedAlTokens[msg.sender];\\n        unstake(toWithdraw);\\n    }\\n\\n    /// @dev Distributes the base token proportionally to all alToken stakers.\\n    ///\\n    /// This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter. \\n    /// Anyone can call this and add funds, idk why they would do that though...\\n    ///\\n    /// @param origin the account that is sending the tokens to be distributed.\\n    /// @param amount the amount of base tokens to be distributed to the transmuter.\\n    function distribute(address origin, uint256 amount) public onlyWhitelisted() runPhasedDistribution() {\\n        require(!pause, \\\"emergency pause enabled\\\");\\n        IERC20Burnable(token).safeTransferFrom(origin, address(this), amount);\\n        buffer = buffer.add(amount);\\n        _plantOrRecallExcessFunds();\\n        emit Distribution(origin, amount);\\n    }\\n\\n    /// @dev Allocates the incoming yield proportionally to all alToken stakers.\\n    ///\\n    /// @param amount the amount of base tokens to be distributed in the transmuter.\\n    function increaseAllocations(uint256 amount) internal {\\n        if(totalSupplyAltokens > 0 && amount > 0) {\\n            totalDividendPoints = totalDividendPoints.add(\\n                amount.mul(pointMultiplier).div(totalSupplyAltokens)\\n            );\\n            unclaimedDividends = unclaimedDividends.add(amount);\\n        } else {\\n            buffer = buffer.add(amount);\\n        }\\n    }\\n\\n    /// @dev Gets the status of a user's staking position.\\n    ///\\n    /// The total amount allocated to a user is the sum of pendingdivs and inbucket.\\n    ///\\n    /// @param user the address of the user you wish to query.\\n    ///\\n    /// returns user status\\n    \\n    function userInfo(address user)\\n        public\\n        view\\n        returns (\\n            uint256 depositedAl,\\n            uint256 pendingdivs,\\n            uint256 inbucket,\\n            uint256 realised\\n        )\\n    {\\n        uint256 _depositedAl = depositedAlTokens[user];\\n        uint256 _toDistribute = buffer.mul(block.number.sub(lastDepositBlock)).div(transmutationPeriod);\\n        if(block.number.sub(lastDepositBlock) > transmutationPeriod){\\n            _toDistribute = buffer;\\n        }\\n        uint256 _pendingdivs = _toDistribute.mul(depositedAlTokens[user]).div(totalSupplyAltokens);\\n        uint256 _inbucket = tokensInBucket[user].add(dividendsOwing(user));\\n        uint256 _realised = realisedTokens[user];\\n        return (_depositedAl, _pendingdivs, _inbucket, _realised);\\n    }\\n\\n    /// @dev Gets the status of multiple users in one call\\n    ///\\n    /// This function is used to query the contract to check for\\n    /// accounts that have overfilled positions in order to check \\n    /// who can be force transmuted.\\n    ///\\n    /// @param from the first index of the userList\\n    /// @param to the last index of the userList\\n    ///\\n    /// returns the userList with their staking status in paginated form. \\n    function getMultipleUserInfo(uint256 from, uint256 to)\\n        public\\n        view\\n        returns (address[] memory theUserList, uint256[] memory theUserData)\\n    {\\n        uint256 i = from;\\n        uint256 delta = to - from;\\n        address[] memory _theUserList = new address[](delta); //user\\n        uint256[] memory _theUserData = new uint256[](delta * 2); //deposited-bucket\\n        uint256 y = 0;\\n        uint256 _toDistribute = buffer.mul(block.number.sub(lastDepositBlock)).div(transmutationPeriod);\\n        if(block.number.sub(lastDepositBlock) > transmutationPeriod){\\n            _toDistribute = buffer;\\n        }\\n        for (uint256 x = 0; x < delta; x += 1) {\\n            _theUserList[x] = userList[i];\\n            _theUserData[y] = depositedAlTokens[userList[i]];\\n            _theUserData[y + 1] = dividendsOwing(userList[i]).add(tokensInBucket[userList[i]]).add(_toDistribute.mul(depositedAlTokens[userList[i]]).div(totalSupplyAltokens));\\n            y += 2;\\n            i += 1;\\n        }\\n        return (_theUserList, _theUserData);\\n    }\\n\\n    /// @dev Gets info on the buffer\\n    ///\\n    /// This function is used to query the contract to get the\\n    /// latest state of the buffer\\n    ///\\n    /// @return _toDistribute the amount ready to be distributed\\n    /// @return _deltaBlocks the amount of time since the last phased distribution\\n    /// @return _buffer the amount in the buffer \\n    function bufferInfo() public view returns (uint256 _toDistribute, uint256 _deltaBlocks, uint256 _buffer){\\n        _deltaBlocks = block.number.sub(lastDepositBlock);\\n        _buffer = buffer; \\n        _toDistribute = _buffer.mul(_deltaBlocks).div(transmutationPeriod);\\n    }\\n\\n    /// @dev Sets the pending governance.\\n    ///\\n    /// This function reverts if the new pending governance is the zero address or the caller is not the current\\n    /// governance. This is to prevent the contract governance being set to the zero address which would deadlock\\n    /// privileged contract functionality.\\n    ///\\n    /// @param _pendingGovernance the new pending governance.\\n    function setPendingGovernance(address _pendingGovernance) external onlyGov() {\\n        require(_pendingGovernance != ZERO_ADDRESS, \\\"Transmuter: 0 gov\\\");\\n\\n        pendingGovernance = _pendingGovernance;\\n\\n        emit PendingGovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    /// @dev Accepts the role as governance.\\n    ///\\n    /// This function reverts if the caller is not the new pending governance.\\n    function acceptGovernance() external  {\\n        require(msg.sender == pendingGovernance,\\\"!pendingGovernance\\\");\\n        address _pendingGovernance = pendingGovernance;\\n        governance = _pendingGovernance;\\n\\n        emit GovernanceUpdated(_pendingGovernance);\\n    }\\n\\n    /// @dev Sets the whitelist\\n    ///\\n    /// This function reverts if the caller is not governance\\n    ///\\n    /// @param _toWhitelist the address to alter whitelist permissions.\\n    /// @param _state the whitelist state.\\n    function setWhitelist(address _toWhitelist, bool _state) external onlyGov() {\\n        whiteList[_toWhitelist] = _state;\\n        emit WhitelistSet(_toWhitelist, _state);\\n    }\\n\\n    /// @dev Sets the keeper list\\n    ///\\n    /// This function reverts if the caller is not governance\\n    ///\\n    /// @param _keepers the accounts to set states for.\\n    /// @param _states the accounts states.\\n    function setKeepers(address[] calldata _keepers, bool[] calldata _states) external onlyGov() {\\n        uint256 n = _keepers.length;\\n        for(uint256 i = 0; i < n; i++) {\\n            keepers[_keepers[i]] = _states[i];\\n        }\\n        emit KeepersSet(_keepers, _states);\\n    }\\n\\n    /// @dev Initializes the contract.\\n    ///\\n    /// This function checks that the transmuter and rewards have been set and sets up the active vault.\\n    ///\\n    /// @param _adapter the vault adapter of the active vault.\\n    function initialize(YearnVaultAdapterWithIndirection _adapter) external onlyGov {\\n        require(!initialized, \\\"Transmuter: already initialized\\\");\\n        require(rewards != ZERO_ADDRESS, \\\"Transmuter: cannot initialize rewards address to 0x0\\\");\\n\\n        _updateActiveVault(_adapter);\\n\\n        initialized = true;\\n    }\\n\\n    function migrate(YearnVaultAdapterWithIndirection _adapter) external onlyGov() {\\n        _updateActiveVault(_adapter);\\n    }\\n\\n    /// @dev Updates the active vault.\\n    ///\\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\\n    ///\\n    /// @param _adapter the adapter for the new active vault.\\n    function _updateActiveVault(YearnVaultAdapterWithIndirection _adapter) internal {\\n        require(_adapter != YearnVaultAdapterWithIndirection(ZERO_ADDRESS), \\\"Transmuter: active vault address cannot be 0x0.\\\");\\n        require(address(_adapter.token()) == token, \\\"Transmuter.vault: token mismatch.\\\");\\n        require(!adapters[_adapter], \\\"Adapter already in use\\\");\\n        adapters[_adapter] = true;\\n        _vaults.push(VaultWithIndirection.Data({\\n            adapter: _adapter,\\n            totalDeposited: 0\\n        }));\\n\\n        emit ActiveVaultUpdated(_adapter);\\n    }\\n\\n    /// @dev Gets the number of vaults in the vault list.\\n    ///\\n    /// @return the vault count.\\n    function vaultCount() external view returns (uint256) {\\n        return _vaults.length();\\n    }\\n\\n    /// @dev Get the adapter of a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault.\\n    ///\\n    /// @return the vault adapter.\\n    function getVaultAdapter(uint256 _vaultId) external view returns (address) {\\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\\n        return address(_vault.adapter);\\n    }\\n\\n    /// @dev Get the total amount of the parent asset that has been deposited into a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault.\\n    ///\\n    /// @return the total amount of deposited tokens.\\n    function getVaultTotalDeposited(uint256 _vaultId) external view returns (uint256) {\\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\\n        return _vault.totalDeposited;\\n    }\\n\\n\\n    /// @dev Recalls funds from active vault if less than amt exist locally\\n    ///\\n    /// @param amt amount of funds that need to exist locally to fulfill pending request\\n    function ensureSufficientFundsExistLocally(uint256 amt) internal {\\n        uint256 currentBal = IERC20Burnable(token).balanceOf(address(this));\\n        if (currentBal < amt) {\\n            uint256 diff = amt - currentBal;\\n            // get enough funds from active vault to replenish local holdings & fulfill claim request\\n            _recallExcessFundsFromActiveVault(plantableThreshold.add(diff));\\n        }\\n    }\\n\\n    /// @dev Recalls all planted funds from a target vault\\n    ///\\n    /// @param _vaultId the id of the vault from which to recall funds\\n    function recallAllFundsFromVault(uint256 _vaultId) external {\\n        require(pause && (msg.sender == governance || msg.sender == sentinel), \\\"Transmuter: not paused, or not governance or sentinel\\\");\\n        _recallAllFundsFromVault(_vaultId);\\n    }\\n\\n    /// @dev Recalls all planted funds from a target vault\\n    ///\\n    /// @param _vaultId the id of the vault from which to recall funds\\n    function _recallAllFundsFromVault(uint256 _vaultId) internal {\\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdrawAll(address(this));\\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Recalls planted funds from a target vault\\n    ///\\n    /// @param _vaultId the id of the vault from which to recall funds\\n    /// @param _amount the amount of funds to recall\\n    function recallFundsFromVault(uint256 _vaultId, uint256 _amount) external {\\n        require(pause && (msg.sender == governance || msg.sender == sentinel), \\\"Transmuter: not paused, or not governance or sentinel\\\");\\n        _recallFundsFromVault(_vaultId, _amount);\\n    }\\n\\n    /// @dev Recalls planted funds from a target vault\\n    ///\\n    /// @param _vaultId the id of the vault from which to recall funds\\n    /// @param _amount the amount of funds to recall\\n    function _recallFundsFromVault(uint256 _vaultId, uint256 _amount) internal {\\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdraw(address(this), _amount);\\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Recalls planted funds from the active vault\\n    ///\\n    /// @param _amount the amount of funds to recall\\n    function _recallFundsFromActiveVault(uint256 _amount) internal {\\n        _recallFundsFromVault(_vaults.lastIndex(), _amount);\\n    }\\n\\n    /// @dev Plants or recalls funds from the active vault\\n    ///\\n    /// This function plants excess funds in an external vault, or recalls them from the external vault\\n    /// Should only be called as part of distribute()\\n    function _plantOrRecallExcessFunds() internal {\\n        // check if the transmuter holds more funds than plantableThreshold\\n        uint256 bal = IERC20Burnable(token).balanceOf(address(this));\\n        uint256 marginVal = plantableThreshold.mul(plantableMargin).div(100);\\n        if (bal > plantableThreshold.add(marginVal)) {\\n            uint256 plantAmt = bal - plantableThreshold;\\n            // if total funds above threshold, send funds to vault\\n            VaultWithIndirection.Data storage _activeVault = _vaults.last();\\n            _activeVault.deposit(plantAmt);\\n        } else if (bal < plantableThreshold.sub(marginVal)) {\\n            // if total funds below threshold, recall funds from vault\\n            // first check that there are enough funds in vault\\n            uint256 harvestAmt = plantableThreshold - bal;\\n            _recallExcessFundsFromActiveVault(harvestAmt);\\n        }\\n    }\\n\\n    /// @dev Recalls up to the harvestAmt from the active vault\\n    ///\\n    /// This function will recall less than harvestAmt if only less is available\\n    ///\\n    /// @param _recallAmt the amount to harvest from the active vault\\n    function _recallExcessFundsFromActiveVault(uint256 _recallAmt) internal {\\n        VaultWithIndirection.Data storage _activeVault = _vaults.last();\\n        uint256 activeVaultVal = _activeVault.totalValue();\\n        if (activeVaultVal < _recallAmt) {\\n            _recallAmt = activeVaultVal;\\n        }\\n        if (_recallAmt > 0) {\\n            _recallFundsFromActiveVault(_recallAmt);\\n        }\\n    }\\n\\n    /// @dev Sets the address of the sentinel\\n    ///\\n    /// @param _sentinel address of the new sentinel\\n    function setSentinel(address _sentinel) external onlyGov() {\\n        require(_sentinel != ZERO_ADDRESS, \\\"Transmuter: sentinel address cannot be 0x0.\\\");\\n        sentinel = _sentinel;\\n        emit SentinelUpdated(_sentinel);\\n    }\\n\\n    /// @dev Sets the threshold of total held funds above which excess funds will be planted in yield farms.\\n    ///\\n    /// This function reverts if the caller is not the current governance.\\n    ///\\n    /// @param _plantableThreshold the new plantable threshold.\\n    function setPlantableThreshold(uint256 _plantableThreshold) external onlyGov() {\\n        plantableThreshold = _plantableThreshold;\\n        emit PlantableThresholdUpdated(_plantableThreshold);\\n    }\\n\\n    /// @dev Sets the plantableThreshold margin for triggering the planting or recalling of funds on harvest\\n    ///\\n    /// This function reverts if the caller is not the current governance.\\n    ///\\n    /// @param _plantableMargin the new plantable margin.\\n    function setPlantableMargin(uint256 _plantableMargin) external onlyGov() {\\n        plantableMargin = _plantableMargin;\\n        emit PlantableMarginUpdated(_plantableMargin);\\n    }\\n\\n    /// @dev Sets the minUserActionDelay \\n    ///\\n    /// This function reverts if the caller is not the current governance.\\n    ///\\n    /// @param _minUserActionDelay the new min user action delay.\\n    function setMinUserActionDelay(uint256 _minUserActionDelay) external onlyGov() {\\n        minUserActionDelay = _minUserActionDelay;\\n        emit MinUserActionDelayUpdated(_minUserActionDelay);\\n    }\\n\\n    /// @dev Sets if the contract should enter emergency exit mode.\\n    ///\\n    /// There are 2 main reasons to pause:\\n    ///     1. Need to shut down deposits in case of an emergency in one of the vaults\\n    ///     2. Need to migrate to a new transmuter\\n    ///\\n    /// While the transmuter is paused, deposit() and distribute() are disabled\\n    ///\\n    /// @param _pause if the contract should enter emergency exit mode.\\n    function setPause(bool _pause) external {\\n        require(msg.sender == governance || msg.sender == sentinel, \\\"!(gov || sentinel)\\\");\\n        pause = _pause;\\n        emit PauseUpdated(_pause);\\n    }\\n\\n    /// @dev Harvests yield from a vault.\\n    ///\\n    /// @param _vaultId the identifier of the vault to harvest from.\\n    ///\\n    /// @return the amount of funds that were harvested from the vault.\\n    function harvest(uint256 _vaultId) external onlyKeeper() returns (uint256, uint256) {\\n\\n        VaultWithIndirection.Data storage _vault = _vaults.get(_vaultId);\\n\\n        (uint256 _harvestedAmount, uint256 _decreasedValue) = _vault.harvest(rewards);\\n\\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\\n\\n        return (_harvestedAmount, _decreasedValue);\\n    }\\n\\n    /// @dev Sets the rewards contract.\\n    ///\\n    /// This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\\n    ///\\n    /// @param _rewards the new rewards contract.\\n    function setRewards(address _rewards) external onlyGov() {\\n        // Check that the rewards address is not the zero address. Setting the rewards to the zero address would break\\n        // transfers to the address because of `safeTransfer` checks.\\n        require(_rewards != ZERO_ADDRESS, \\\"Transmuter: rewards address cannot be 0x0.\\\");\\n\\n        rewards = _rewards;\\n\\n        emit RewardsUpdated(_rewards);\\n    }\\n\\n    /// @dev Migrates transmuter funds to a new transmuter\\n    ///\\n    /// @param migrateTo address of the new transmuter\\n    function migrateFunds(address migrateTo) external onlyGov() {\\n        require(migrateTo != address(0), \\\"cannot migrate to 0x0\\\");\\n        require(pause, \\\"migrate: set emergency exit first\\\");\\n\\n        // leave enough funds to service any pending transmutations\\n        uint256 totalFunds = IERC20Burnable(token).balanceOf(address(this));\\n        uint256 migratableFunds = totalFunds.sub(totalSupplyAltokens, \\\"not enough funds to service stakes\\\");\\n        IERC20Burnable(token).approve(migrateTo, migratableFunds);\\n        ITransmuter(migrateTo).distribute(address(this), migratableFunds);\\n        emit MigrationComplete(migrateTo, migratableFunds);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x93c4438e7d5567cfd94c3724d9c03b924003d0038220a3b9b6bae1bd3db6385e\"},\"contracts/adapters/YearnVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {FixedPointMath} from \\\"../libraries/FixedPointMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../interfaces/IDetailedERC20.sol\\\";\\nimport {IVaultAdapter} from \\\"../interfaces/IVaultAdapter.sol\\\";\\nimport {IyVaultV2} from \\\"../interfaces/IyVaultV2.sol\\\";\\n\\n/// @title YearnVaultAdapter\\n///\\n/// @dev A vault adapter implementation which wraps a yEarn vault.\\ncontract YearnVaultAdapter is IVaultAdapter {\\n  using FixedPointMath for FixedPointMath.FixedDecimal;\\n  using SafeERC20 for IDetailedERC20;\\n  using SafeMath for uint256;\\n\\n  /// @dev The vault that the adapter is wrapping.\\n  IyVaultV2 public vault;\\n\\n  /// @dev The address which has admin control over this contract.\\n  address public admin;\\n\\n  /// @dev The decimals of the token.\\n  uint256 public decimals;\\n\\n  constructor(IyVaultV2 _vault, address _admin) public {\\n    vault = _vault;\\n    admin = _admin;\\n    updateApproval();\\n    decimals = _vault.decimals();\\n  }\\n\\n  /// @dev A modifier which reverts if the caller is not the admin.\\n  modifier onlyAdmin() {\\n    require(admin == msg.sender, \\\"YearnVaultAdapter: only admin\\\");\\n    _;\\n  }\\n\\n  /// @dev Gets the token that the vault accepts.\\n  ///\\n  /// @return the accepted token.\\n  function token() external view override returns (IDetailedERC20) {\\n    return IDetailedERC20(vault.token());\\n  }\\n\\n  /// @dev Gets the total value of the assets that the adapter holds in the vault.\\n  ///\\n  /// @return the total assets.\\n  function totalValue() external view override returns (uint256) {\\n    return _sharesToTokens(vault.balanceOf(address(this)));\\n  }\\n\\n  /// @dev Deposits tokens into the vault.\\n  ///\\n  /// @param _amount the amount of tokens to deposit into the vault.\\n  function deposit(uint256 _amount) external override {\\n    vault.deposit(_amount);\\n  }\\n\\n  /// @dev Withdraws tokens from the vault to the recipient.\\n  ///\\n  /// This function reverts if the caller is not the admin.\\n  ///\\n  /// @param _recipient the account to withdraw the tokes to.\\n  /// @param _amount    the amount of tokens to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\\n    vault.withdraw(_tokensToShares(_amount),_recipient);\\n  }\\n\\n  /// @dev Updates the vaults approval of the token to be the maximum value.\\n  function updateApproval() public {\\n    address _token = vault.token();\\n    IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));\\n  }\\n\\n  /// @dev Computes the number of tokens an amount of shares is worth.\\n  ///\\n  /// @param _sharesAmount the amount of shares.\\n  ///\\n  /// @return the number of tokens the shares are worth.\\n  \\n  function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {\\n    return _sharesAmount.mul(vault.pricePerShare()).div(10**decimals);\\n  }\\n\\n  /// @dev Computes the number of shares an amount of tokens is worth.\\n  ///\\n  /// @param _tokensAmount the amount of shares.\\n  ///\\n  /// @return the number of shares the tokens are worth.\\n  function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {\\n    return _tokensAmount.mul(10**decimals).div(vault.pricePerShare());\\n  }\\n}\",\"keccak256\":\"0x2072c44bebdb6d2e48fb79e4b5e3524898b9a19902edd097fc09dbf67b285a29\",\"license\":\"GPL-3.0\"},\"contracts/adapters/YearnVaultAdapterWithIndirection.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport {FixedPointMath} from \\\"../libraries/FixedPointMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../interfaces/IDetailedERC20.sol\\\";\\nimport {IVaultAdapter} from \\\"../interfaces/IVaultAdapter.sol\\\";\\nimport {IyVaultV2} from \\\"../interfaces/IyVaultV2.sol\\\";\\nimport {YearnVaultAdapter} from \\\"./YearnVaultAdapter.sol\\\";\\n\\n/// @title YearnVaultAdapter\\n///\\n/// @dev A vault adapter implementation which wraps a yEarn vault.\\ncontract YearnVaultAdapterWithIndirection is YearnVaultAdapter {\\n    using FixedPointMath for FixedPointMath.FixedDecimal;\\n    using SafeERC20 for IDetailedERC20;\\n    using SafeERC20 for IyVaultV2;\\n    using SafeMath for uint256;\\n\\n    constructor(IyVaultV2 _vault, address _admin) YearnVaultAdapter(_vault, _admin) public {\\n    }\\n\\n    /// @dev Sends vault tokens to the recipient\\n    ///\\n    /// This function reverts if the caller is not the admin.\\n    ///\\n    /// @param _recipient the account to send the tokens to.\\n    /// @param _amount    the amount of tokens to send.\\n    function indirectWithdraw(address _recipient, uint256 _amount) external onlyAdmin {\\n        vault.safeTransfer(_recipient, _tokensToShares(_amount));\\n    }\\n}\",\"keccak256\":\"0xa0d1a0c51ae4d7aeb4896f1416bf009a6e665cd9cfbc4720be880446150fe493\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDetailedERC20 is IERC20 {\\n  function name() external returns (string memory);\\n  function symbol() external returns (string memory);\\n  function decimals() external returns (uint8);\\n}\",\"keccak256\":\"0xd7da49ed3fd58d47d3d9d4c37d96841d117916cb3975648ec82d09a30dc5e63d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Burnable is IERC20 {\\n  function burn(uint256 amount) external;\\n  function burnFrom(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0xb5a8bfeb2f1a10da0a74627edb48a5a777dfdea11e23704fc37b22c118caac4c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITransmuter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\ninterface ITransmuter  {\\n  function distribute (address origin, uint256 amount) external;\\n}\",\"keccak256\":\"0x6cbb6dda4377d625635453ceb7a8c8fc9c8d5c55d2e6ef0b11b5c9ccb270b59c\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IVaultAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IDetailedERC20.sol\\\";\\n\\n/// Interface for all Vault Adapter implementations.\\ninterface IVaultAdapter {\\n\\n  /// @dev Gets the token that the adapter accepts.\\n  function token() external view returns (IDetailedERC20);\\n\\n  /// @dev The total value of the assets deposited into the vault.\\n  function totalValue() external view returns (uint256);\\n\\n  /// @dev Deposits funds into the vault.\\n  ///\\n  /// @param _amount  the amount of funds to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Attempts to withdraw funds from the wrapped vault.\\n  ///\\n  /// The amount withdrawn to the recipient may be less than the amount requested.\\n  ///\\n  /// @param _recipient the recipient of the funds.\\n  /// @param _amount    the amount of funds to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n}\",\"keccak256\":\"0x2068367acc37e93a71f8c91343abdf2714895df202fff414d11c3f258af55f52\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IyVaultV2.sol\":{\"content\":\"pragma solidity ^0.6.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IyVaultV2 is IERC20 {\\n    function token() external view returns (address);\\n    function deposit() external returns (uint);\\n    function deposit(uint) external returns (uint);\\n    function deposit(uint, address) external returns (uint);\\n    function withdraw() external returns (uint);\\n    function withdraw(uint) external returns (uint);\\n    function withdraw(uint, address) external returns (uint);\\n    function withdraw(uint, address, uint) external returns (uint);\\n    function permit(address, address, uint, uint, bytes32) external view returns (bool);\\n    function pricePerShare() external view returns (uint);\\n    \\n    function apiVersion() external view returns (string memory);\\n    function totalAssets() external view returns (uint);\\n    function maxAvailableShares() external view returns (uint);\\n    function debtOutstanding() external view returns (uint);\\n    function debtOutstanding(address strategy) external view returns (uint);\\n    function creditAvailable() external view returns (uint);\\n    function creditAvailable(address strategy) external view returns (uint);\\n    function availableDepositLimit() external view returns (uint);\\n    function expectedReturn() external view returns (uint);\\n    function expectedReturn(address strategy) external view returns (uint);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint);\\n    function balanceOf(address owner) external view override returns (uint);\\n    function totalSupply() external view override returns (uint);\\n    function governance() external view returns (address);\\n    function management() external view returns (address);\\n    function guardian() external view returns (address);\\n    function guestList() external view returns (address);\\n    function strategies(address) external view returns (uint, uint, uint, uint, uint, uint, uint, uint);\\n    function withdrawalQueue(uint) external view returns (address);\\n    function emergencyShutdown() external view returns (bool);\\n    function depositLimit() external view returns (uint);\\n    function debtRatio() external view returns (uint);\\n    function totalDebt() external view returns (uint);\\n    function lastReport() external view returns (uint);\\n    function activation() external view returns (uint);\\n    function rewards() external view returns (address);\\n    function managementFee() external view returns (uint);\\n    function performanceFee() external view returns (uint);\\n}\",\"keccak256\":\"0x573d6f45b72bd82ecf2ba9f751e8bb9bc8b74b43c7f756b7d135c15edcd219a5\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.6.12;\\n\\nlibrary FixedPointMath {\\n  uint256 public constant DECIMALS = 18;\\n  uint256 public constant SCALAR = 10**DECIMALS;\\n\\n  struct FixedDecimal {\\n    uint256 x;\\n  }\\n\\n  function fromU256(uint256 value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\\n    return FixedDecimal(x);\\n  }\\n\\n  function maximumValue() internal pure returns (FixedDecimal memory) {\\n    return FixedDecimal(uint256(-1));\\n  }\\n\\n  function add(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require((x = self.x + value.x) >= self.x);\\n    return FixedDecimal(x);\\n  }\\n\\n  function add(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    return add(self, fromU256(value));\\n  }\\n\\n  function sub(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require((x = self.x - value.x) <= self.x);\\n    return FixedDecimal(x);\\n  }\\n\\n  function sub(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    return sub(self, fromU256(value));\\n  }\\n\\n  function mul(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    uint256 x;\\n    require(value == 0 || (x = self.x * value) / value == self.x);\\n    return FixedDecimal(x);\\n  }\\n\\n  function div(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\n    require(value != 0);\\n    return FixedDecimal(self.x / value);\\n  }\\n\\n  function cmp(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (int256) {\\n    if (self.x < value.x) {\\n      return -1;\\n    }\\n\\n    if (self.x > value.x) {\\n      return 1;\\n    }\\n\\n    return 0;\\n  }\\n\\n  function decode(FixedDecimal memory self) internal pure returns (uint256) {\\n    return self.x / SCALAR;\\n  }\\n}\",\"keccak256\":\"0x23fb0a959da28d0330f9b6f4c45a982f46d1d8f501d99ebaa7e1f35b47d9cb70\",\"license\":\"Unlicense\"},\"contracts/libraries/alchemist/VaultWithIndirection.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.6.12;\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\nimport {YearnVaultAdapterWithIndirection} from \\\"../../adapters/YearnVaultAdapterWithIndirection.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @title Pool\\n///\\n/// @dev A library which provides the Vault data struct and associated functions.\\nlibrary VaultWithIndirection {\\n  using VaultWithIndirection for Data;\\n  using VaultWithIndirection for List;\\n  using SafeERC20 for IDetailedERC20;\\n  using SafeMath for uint256;\\n\\n  struct Data {\\n    YearnVaultAdapterWithIndirection adapter;\\n    uint256 totalDeposited;\\n  }\\n\\n  struct List {\\n    Data[] elements;\\n  }\\n\\n  /// @dev Gets the total amount of assets deposited in the vault.\\n  ///\\n  /// @return the total assets.\\n  function totalValue(Data storage _self) internal view returns (uint256) {\\n    return _self.adapter.totalValue();\\n  }\\n\\n  /// @dev Gets the token that the vault accepts.\\n  ///\\n  /// @return the accepted token.\\n  function token(Data storage _self) internal view returns (IDetailedERC20) {\\n    return IDetailedERC20(_self.adapter.token());\\n  }\\n\\n  /// @dev Deposits funds from the caller into the vault.\\n  ///\\n  /// @param _amount the amount of funds to deposit.\\n  function deposit(Data storage _self, uint256 _amount) internal returns (uint256) {\\n    // Push the token that the vault accepts onto the stack to save gas.\\n    IDetailedERC20 _token = _self.token();\\n\\n    _token.safeTransfer(address(_self.adapter), _amount);\\n    _self.adapter.deposit(_amount);\\n    _self.totalDeposited = _self.totalDeposited.add(_amount);\\n\\n    return _amount;\\n  }\\n\\n  /// @dev Deposits the entire token balance of the caller into the vault.\\n  function depositAll(Data storage _self) internal returns (uint256) {\\n    IDetailedERC20 _token = _self.token();\\n    return _self.deposit(_token.balanceOf(address(this)));\\n  }\\n\\n  /// @dev Withdraw deposited funds from the vault.\\n  ///\\n  /// @param _recipient the account to withdraw the tokens to.\\n  /// @param _amount    the amount of tokens to withdraw.\\n  function withdraw(Data storage _self, address _recipient, uint256 _amount) internal returns (uint256, uint256) {\\n    (uint256 _withdrawnAmount, uint256 _decreasedValue) = _self.directWithdraw(_recipient, _amount);\\n    _self.totalDeposited = _self.totalDeposited.sub(_decreasedValue);\\n    return (_withdrawnAmount, _decreasedValue);\\n  }\\n\\n  /// @dev Directly withdraw deposited funds from the vault.\\n  ///\\n  /// @param _recipient the account to withdraw the tokens to.\\n  /// @param _amount    the amount of tokens to withdraw.\\n  function directWithdraw(Data storage _self, address _recipient, uint256 _amount) internal returns (uint256, uint256) {\\n    IDetailedERC20 _token = _self.token();\\n\\n    uint256 _startingBalance = _token.balanceOf(_recipient);\\n    uint256 _startingTotalValue = _self.totalValue();\\n\\n    _self.adapter.withdraw(_recipient, _amount);\\n\\n    uint256 _endingBalance = _token.balanceOf(_recipient);\\n    uint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\\n\\n    uint256 _endingTotalValue = _self.totalValue();\\n    uint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\\n\\n    return (_withdrawnAmount, _decreasedValue);\\n  }\\n\\n  /// @dev Directly withdraw deposited funds from the vault.\\n  ///\\n  /// @param _recipient the account to withdraw the tokens to.\\n  /// @param _amount    the amount of tokens to withdraw.\\n  function indirectWithdraw(Data storage _self, address _recipient, uint256 _amount) internal returns (uint256, uint256) {\\n    IDetailedERC20 _token = _self.token();\\n\\n    uint256 _startingBalance = _token.balanceOf(_recipient);\\n    uint256 _startingTotalValue = _self.totalValue();\\n\\n    _self.adapter.indirectWithdraw(_recipient, _amount);\\n\\n    uint256 _endingBalance = _token.balanceOf(_recipient);\\n    uint256 _withdrawnAmount = _endingBalance.sub(_startingBalance);\\n\\n    uint256 _endingTotalValue = _self.totalValue();\\n    uint256 _decreasedValue = _startingTotalValue.sub(_endingTotalValue);\\n\\n    return (_withdrawnAmount, _decreasedValue);\\n  }\\n\\n  /// @dev Withdraw all the deposited funds from the vault.\\n  ///\\n  /// @param _recipient the account to withdraw the tokens to.\\n  function withdrawAll(Data storage _self, address _recipient) internal returns (uint256, uint256) {\\n    return _self.withdraw(_recipient, _self.totalDeposited);\\n  }\\n\\n  /// @dev Harvests yield from the vault.\\n  ///\\n  /// @param _recipient the account to withdraw the harvested yield to.\\n  function harvest(Data storage _self, address _recipient) internal returns (uint256, uint256) {\\n    if (_self.totalValue() <= _self.totalDeposited) {\\n      return (0, 0);\\n    }\\n    uint256 _withdrawAmount = _self.totalValue().sub(_self.totalDeposited);\\n    return _self.indirectWithdraw(_recipient, _withdrawAmount);\\n  }\\n\\n  /// @dev Adds a element to the list.\\n  ///\\n  /// @param _element the element to add.\\n  function push(List storage _self, Data memory _element) internal {\\n    _self.elements.push(_element);\\n  }\\n\\n  /// @dev Gets a element from the list.\\n  ///\\n  /// @param _index the index in the list.\\n  ///\\n  /// @return the element at the specified index.\\n  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\\n    return _self.elements[_index];\\n  }\\n\\n  /// @dev Gets the last element in the list.\\n  ///\\n  /// This function will revert if there are no elements in the list.\\n  ///\\n  /// @return the last element in the list.\\n  function last(List storage _self) internal view returns (Data storage) {\\n    return _self.elements[_self.lastIndex()];\\n  }\\n\\n  /// @dev Gets the index of the last element in the list.\\n  ///\\n  /// This function will revert if there are no elements in the list.\\n  ///\\n  /// @return the index of the last element.\\n  function lastIndex(List storage _self) internal view returns (uint256) {\\n    uint256 _length = _self.length();\\n    return _length.sub(1, \\\"Vault.List: empty\\\");\\n  }\\n\\n  /// @dev Gets the number of elements in the list.\\n  ///\\n  /// @return the number of elements.\\n  function length(List storage _self) internal view returns (uint256) {\\n    return _self.elements.length;\\n  }\\n}\\n\",\"keccak256\":\"0x85635866b2c97215ea4db69a38c69ea82712cbb050bfeb6f0b15d22d0eef2577\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052678ac7230489e80000600d556a0422ca8b0a00a42500000060125560056013553480156200003157600080fd5b50604051620055ff380380620055ff833981810160405260608110156200005757600080fd5b50805160208201516040909201519091906001600160a01b038116620000b8576040805162461bcd60e51b81526020600482015260116024820152702a3930b739b6baba32b91d10181033b7bb60791b604482015290519081900360640190fd5b601480546001600160a01b039283166001600160a01b03199182161790915560018054948316948216949094178455600280549390921692169190911790556207a120600055601c556016805460ff60a01b1916600160a01b1790556154db80620001246000396000f3fe608060405234801561001057600080fd5b50600436106103c55760003560e01c806381ac45fb116101ff578063c4d66de81161011a578063ec38a862116100ad578063f58c251c1161007c578063f58c251c14610be5578063f93f394c14610bed578063fb93210814610c20578063fc0c546a14610c59576103c5565b8063ec38a86214610b9a578063edaafe2014610bcd578063f1f7920014610bd5578063f39c38a014610bdd576103c5565b8063ddc63262116100e9578063ddc6326214610b21578063e044205e14610b57578063e5711ffc14610b5f578063e9fad8ee14610b92576103c5565b8063c4d66de814610a96578063ce5494bb14610ac9578063d2c2949214610afc578063d42c11e114610b19576103c5565b8063a694fc3a11610192578063b870d59811610161578063b870d598146109de578063bedb86fb14610a11578063bf51929f14610a30578063bff170b914610a63576103c5565b8063a694fc3a14610969578063a704e8ad14610986578063a7c6a100146109b9578063aaf16660146109c1576103c5565b80639ec5a894116101ce5780639ec5a8941461091f5780639f4216e814610927578063a02fbe2d14610944578063a196cf2e14610961576103c5565b806381ac45fb146108bf5780638391e45c146108c75780638456cb59146108fa57806394ff119914610902576103c5565b80632e17de78116102ef57806353d6fd59116102825780636a4f4b05116102515780636a4f4b051461077457806370460eb11461083657806379070a1214610859578063806985f71461088c576103c5565b806353d6fd59146107215780635aa6e6751461075c578063658b98a9146107645780636790fab31461076c576103c5565b80634bf04bd1116102be5780634bf04bd1146106d65780634e71d92d146106de57806352710007146106e6578063538ba4f914610719576103c5565b80632e17de781461064b578063372c12b1146106685780633bbd64bc1461069b5780633cb802b9146106ce576103c5565b80631959a00211610367578063238efcbc11610336578063238efcbc146105ed5780632670fdd8146105f55780632a03cf681461063b5780632a3d7c8114610643576103c5565b80631959a0021461056a5780631acce030146105c35780631aeb1986146105dd5780632113342d146105e5576103c5565b806309dac061116103a357806309dac061146104cb5780630abb6035146104fe5780631486bf6e14610531578063158ef93e1461054e576103c5565b806303036290146103ca57806305d2301d146104865780630668911e146104ac575b600080fd5b6103ed600480360360408110156103e057600080fd5b5080359060200135610c61565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610431578181015183820152602001610419565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610470578181015183820152602001610458565b5050505090500194505050505060405180910390f35b61048e610ebe565b60408051938452602084019290925282820152519081900360600190f35b6104c9600480360360208110156104c257600080fd5b5035610ef8565b005b6104c9600480360360208110156104e157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fb9565b6104c96004803603602081101561051457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611124565b6104c96004803603602081101561054757600080fd5b50356112a5565b610556611366565b604080519115158252519081900360200190f35b61059d6004803603602081101561058057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661136f565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6105cb611488565b60408051918252519081900360200190f35b6105cb61148e565b6105cb611494565b6104c961149a565b6106126004803603602081101561060b57600080fd5b503561159c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6104c96115c8565b6105cb61165a565b6104c96004803603602081101561066157600080fd5b5035611660565b6105566004803603602081101561067e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118d0565b610556600480360360208110156106b157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118e5565b6105cb6118fa565b6105cb611900565b6104c9611906565b6105cb600480360360208110156106fc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a54565b610612611a66565b6104c96004803603604081101561073757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611a6b565b610612611b80565b6105cb611b9c565b610612611ba2565b6104c96004803603604081101561078a57600080fd5b8101906020810181356401000000008111156107a557600080fd5b8201836020820111156107b757600080fd5b803590602001918460208302840111640100000000831117156107d957600080fd5b9193909290916020810190356401000000008111156107f757600080fd5b82018360208201111561080957600080fd5b8035906020019184602083028401116401000000008311171561082b57600080fd5b509092509050611bbe565b6104c96004803603604081101561084c57600080fd5b5080359060200135611db0565b6105566004803603602081101561086f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e75565b6105cb600480360360208110156108a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e8a565b6105cb611e9c565b6105cb600480360360208110156108dd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ea2565b610556611f18565b6104c96004803603602081101561091857600080fd5b5035611f39565b610612611ffa565b6106126004803603602081101561093d57600080fd5b5035612016565b6104c96004803603602081101561095a57600080fd5b503561203e565b6105cb6120ff565b6104c96004803603602081101561097f57600080fd5b5035612105565b6105cb6004803603602081101561099c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612531565b6105cb612543565b6105cb600480360360208110156109d757600080fd5b5035612554565b6105cb600480360360208110156109f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661256d565b6104c960048036036020811015610a2757600080fd5b5035151561257f565b6104c960048036036020811015610a4657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166126a6565b6104c960048036036020811015610a7957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a79565b6104c960048036036020811015610aac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166130c0565b6104c960048036036020811015610adf57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661325d565b6104c960048036036020811015610b1257600080fd5b50356132ef565b6105cb6133af565b610b3e60048036036020811015610b3757600080fd5b50356133b5565b6040805192835260208301919091528051918290030190f35b6104c96134b8565b61055660048036036020811015610b7557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613561565b6104c9613576565b6104c960048036036020811015610bb057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166135fe565b6105cb613769565b6104c961376f565b610612613c43565b610612613c5f565b6105cb60048036036020811015610c0357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613c7b565b6104c960048036036040811015610c3657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135613c8d565b610612613ea5565b60608083808403828167ffffffffffffffff81118015610c8057600080fd5b50604051908082528060200260200182016040528015610caa578160200160208202803683370190505b50905060608260020267ffffffffffffffff81118015610cc957600080fd5b50604051908082528060200260200182016040528015610cf3578160200160208202803683370190505b509050600080610d26600054610d20610d17600c5443613ec190919063ffffffff16565b600b5490613f3d565b90613fb0565b9050600054610d40600c5443613ec190919063ffffffff16565b1115610d4b5750600b545b60005b85811015610eab57600087815260086020526040902054855173ffffffffffffffffffffffffffffffffffffffff90911690869083908110610d8c57fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092018101919091526000898152600882526040808220549093168152600390915220548451859085908110610ddc57fe5b602090810291909101810191909152600a5460008981526008835260408082205473ffffffffffffffffffffffffffffffffffffffff16825260039093529190912054610e7e91610e3291610d20908690613f3d565b60008981526008602081815260408084205473ffffffffffffffffffffffffffffffffffffffff168085526004835290842054938d9052919052610e7891908290611ea2565b90614031565b848460010181518110610e8d57fe5b60209081029190910101526001968701966002939093019201610d4e565b50929650909450505050505b9250929050565b6000806000610ed8600c5443613ec190919063ffffffff16565b600b546000549193509150610ef190610d208385613f3d565b9250909192565b60145473ffffffffffffffffffffffffffffffffffffffff163314610f7e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b60128190556040805182815290517fe77487d7758cc0f4820329f0d13f96448757377d4bf03ca31ce49cc9e151486f9181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff16331461103f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166110ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061547b602b913960400191505060405180910390fd5b6016805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fdc117600f93282860144d2cd2745f8e2e15c3ca2a32b4290c30f7cd1ae7ffcb99181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff1633146111aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661122c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5472616e736d757465723a203020676f76000000000000000000000000000000604482015290519081900360640190fd5b6015805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e78399181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff16331461132b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b601c8190556040805182815290517f3bff5293be89c925015798c1dfc042b8a1108bad4eb02ba603aea7ed96ac0cfd9181900360200190a150565b601a5460ff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120548154600c5483928392839283916113b591610d2090610d17904390613ec1565b90506000546113cf600c5443613ec190919063ffffffff16565b11156113da5750600b545b600a5473ffffffffffffffffffffffffffffffffffffffff8816600090815260036020526040812054909161141491610d20908590613f3d565b905060006114506114248a611ea2565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526004602052604090205490614031565b73ffffffffffffffffffffffffffffffffffffffff999099166000908152600560205260409020549399919897509295509350505050565b60135481565b60125481565b600e5481565b60155473ffffffffffffffffffffffffffffffffffffffff16331461152057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f2170656e64696e67476f7665726e616e63650000000000000000000000000000604482015290519081900360640190fd5b601554601480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040805182815290517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab9181900360200190a150565b6000806115aa6019846140a5565b5473ffffffffffffffffffffffffffffffffffffffff169392505050565b6115d1336140cc565b1580156115dd57503332145b61164857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b61165061376f565b611658611906565b565b600c5481565b611669336140cc565b15801561167557503332145b6116e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b3360006116ec82611ea2565b9050801561175b57600f546117019082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546117349082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff8316600090815260066020908152604080832093909355338083526003909152919020548411156117ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603381526020018061539a6033913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205461181f9085613ec1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902055600a546118529085613ec1565b600a556001546118799073ffffffffffffffffffffffffffffffffffffffff1682866140d2565b6040805173ffffffffffffffffffffffffffffffffffffffff831681526020810186905281517f51c9b122c2b81c914282042bf02d3a8965f5a0b1ad37b6dab1cb77bb343ce556929181900390910190a150505050565b60106020526000908152604090205460ff1681565b60116020526000908152604090205460ff1681565b600f5481565b600a5481565b61190f336140cc565b15801561191b57503332145b61198657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b3360008181526005602052604090205461199f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812080549190556119d281614164565b6002546119f69073ffffffffffffffffffffffffffffffffffffffff1683836140d2565b6002546040805173ffffffffffffffffffffffffffffffffffffffff80861682529092166020830152818101839052517f4831bdd9dcf3048a28319ce81d3cab7a15366bcf449bc7803a539107440809cc9181900360600190a15050565b60056020526000908152604090205481565b600081565b60145473ffffffffffffffffffffffffffffffffffffffff163314611af157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526010602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517f0aa5ec5ffdc7f6f9c4d0dded489d7450297155cb2f71cb771e02427f7dff4f519281900390910190a15050565b60145473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60145473ffffffffffffffffffffffffffffffffffffffff163314611c4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b8260005b81811015611cd957838382818110611c5c57fe5b90506020020135151560116000888885818110611c7557fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101611c48565b507fd1721b10ac5fe95d2627d512aa0f92c34ada0347c874adf414cf51af5760ff56858585856040518080602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039850909650505050505050a15050505050565b60165474010000000000000000000000000000000000000000900460ff168015611e12575060145473ffffffffffffffffffffffffffffffffffffffff16331480611e12575060165473ffffffffffffffffffffffffffffffffffffffff1633145b611e67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806152b16035913960400191505060405180910390fd5b611e718282614225565b5050565b60076020526000908152604090205460ff1681565b60066020526000908152604090205481565b60005481565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054600e548291611ed79190613ec1565b600d5473ffffffffffffffffffffffffffffffffffffffff8516600090815260036020526040902054919250611f1191610d209084613f3d565b9392505050565b60165474010000000000000000000000000000000000000000900460ff1681565b60145473ffffffffffffffffffffffffffffffffffffffff163314611fbf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b60138190556040805182815290517fcf837c6f8ba9f94fb0b21939d04aba4ae1cf50cbeca85513c218dfdc6666f1a99181900360200190a150565b60175473ffffffffffffffffffffffffffffffffffffffff1681565b60086020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60145473ffffffffffffffffffffffffffffffffffffffff1633146120c457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b60008190556040805182815290517fc2965d898897107f6f1d0e43c043ca07b7a51d487acfac1decec2ec8405364409181900360200190a150565b60095481565b61210e336140cc565b15801561211a57503332145b61218557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b601c54336000908152601b60205260409020546121a3904390613ec1565b101561221057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f616374696f6e2064656c6179206e6f74206d6574000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604081204390819055600c54600b54909290801561229757600061223f8486613ec1565b9050600054811061225257819250612279565b60005461225f8383613f3d565b11156122795760005461227690610d208484613f3d565b92505b8215612295576122898284613ec1565b600b556122958361428d565b505b600c8390553360006122a882611ea2565b9050801561231757600f546122bd9082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546122f09082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083209390935533825260079052205460ff166123d15760098054600090815260086020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915583526007909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581540190555b60165474010000000000000000000000000000000000000000900460ff161561245b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f656d657267656e637920706175736520656e61626c6564000000000000000000604482015290519081900360640190fd5b60015433906124829073ffffffffffffffffffffffffffffffffffffffff1682308b6142f6565b600a5461248f9089614031565b600a5573ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020546124c29089614031565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600360209081526040918290209390935580519182529181018a905281517fd2c11ddc796e75881f492256edb3cb3bf4c7a7761682320c5798a8dbb3662d88929181900390910190a15050505050505050565b601b6020526000908152604090205481565b600061254f6019614391565b905090565b6000806125626019846140a5565b600101549392505050565b60046020526000908152604090205481565b60145473ffffffffffffffffffffffffffffffffffffffff163314806125bc575060165473ffffffffffffffffffffffffffffffffffffffff1633145b61262757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f2128676f76207c7c2073656e74696e656c290000000000000000000000000000604482015290519081900360640190fd5b601680548215157401000000000000000000000000000000000000000081027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790915560408051918252517f77860e247ab9186dbe64e5bd0e0b93273cc4273e01818420e788f500078886f59181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff16331461272c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166127ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f63616e6e6f74206d69677261746520746f203078300000000000000000000000604482015290519081900360640190fd5b60165474010000000000000000000000000000000000000000900460ff16612821576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153cd6021913960400191505060405180910390fd5b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561289257600080fd5b505afa1580156128a6573d6000803e3d6000fd5b505050506040513d60208110156128bc57600080fd5b5051600a54604080516060810190915260228082529293506000926128ed9291906152e66020830139849190614395565b600254604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201859052915193945091169163095ea7b3916044808201926020929091908290030181600087803b15801561296b57600080fd5b505af115801561297f573d6000803e3d6000fd5b505050506040513d602081101561299557600080fd5b5050604080517ffb93210800000000000000000000000000000000000000000000000000000000815230600482015260248101839052905173ffffffffffffffffffffffffffffffffffffffff85169163fb93210891604480830192600092919082900301818387803b158015612a0b57600080fd5b505af1158015612a1f573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff871681526020810185905281517f491c0362a655f805cc3d5ab67c471c6b4e517051540c85134456449ce6c1a6799450908190039091019150a1505050565b612a82336140cc565b158015612a8e57503332145b612af957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b601c54336000908152601b6020526040902054612b17904390613ec1565b1015612b8457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f616374696f6e2064656c6179206e6f74206d6574000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604081204390819055600c54600b549092908015612c0b576000612bb38486613ec1565b90506000548110612bc657819250612bed565b600054612bd38383613f3d565b1115612bed57600054612bea90610d208484613f3d565b92505b8215612c0957612bfd8284613ec1565b600b55612c098361428d565b505b600c839055336000612c1c82611ea2565b90508015612c8b57600f54612c319082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054612c649082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120919091558790612cc282611ea2565b90508015612d3157600f54612cd79082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054612d0a9082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083209390935533825260079052205460ff16612deb5760098054600090815260086020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915583526007909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581540190555b73ffffffffffffffffffffffffffffffffffffffff89166000908152600460209081526040808320546003909252909120543391908111612e8d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5472616e736d757465723a20216f766572666c6f770000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526004602090815260408083208390556003909152812054612ecb908390613ec1565b73ffffffffffffffffffffffffffffffffffffffff808e1660009081526003602052604080822080549083905560015482517f42966c6800000000000000000000000000000000000000000000000000000000815260048101839052925191975094955093909216926342966c6892602480820193929182900301818387803b158015612f5757600080fd5b505af1158015612f6b573d6000803e3d6000fd5b5050600a54612f7d9250905083613ec1565b600a5573ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040902054612fb09082614031565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260046020908152604080832094909455918f16815260059091522054612ff39083614031565b73ffffffffffffffffffffffffffffffffffffffff8d16600090815260056020526040902081905561302481614164565b73ffffffffffffffffffffffffffffffffffffffff808e1660009081526005602052604081205560025461305a91168e836140d2565b6040805173ffffffffffffffffffffffffffffffffffffffff80871682528f16602082015280820183905290517fb1e35379b2ed6821c33158f59080978024478baafa855571cd84e46b9848b3ce9181900360600190a150505050505050505050505050565b60145473ffffffffffffffffffffffffffffffffffffffff16331461314657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b601a5460ff16156131b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e736d757465723a20616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b60175473ffffffffffffffffffffffffffffffffffffffff16613226576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806153ee6034913960400191505060405180910390fd5b61322f81614446565b50601a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60145473ffffffffffffffffffffffffffffffffffffffff1633146132e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b6132ec81614446565b50565b60165474010000000000000000000000000000000000000000900460ff168015613351575060145473ffffffffffffffffffffffffffffffffffffffff16331480613351575060165473ffffffffffffffffffffffffffffffffffffffff1633145b6133a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806152b16035913960400191505060405180910390fd5b6132ec816146fb565b601c5481565b33600090815260116020526040812054819060ff1661343557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e736d757465723a20216b656570657200000000000000000000000000604482015290519081900360640190fd5b60006134426019856140a5565b601754909150600090819061346e90849073ffffffffffffffffffffffffffffffffffffffff16614761565b604080518381526020810183905281519395509193507f11d2034f4471d11a13f0f1798ceaf0c9db2812d450a0681958ce7d4f2fb97f0992918290030190a1909350915050915091565b6134c1336140cc565b1580156134cd57503332145b61353857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b61354061376f565b613548611906565b336000908152600360205260409020546132ec81611660565b60186020526000908152604090205460ff1681565b61357f336140cc565b15801561358b57503332145b6135f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b61354861376f565b60145473ffffffffffffffffffffffffffffffffffffffff16331461368457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166136f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061532e602a913960400191505060405180910390fd5b6017805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf9181900360200190a150565b600b5481565b613778336140cc565b15801561378457503332145b6137ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b601c54336000908152601b602052604090205461380d904390613ec1565b101561387a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f616374696f6e2064656c6179206e6f74206d6574000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604081204390819055600c54600b5490929080156139015760006138a98486613ec1565b905060005481106138bc578192506138e3565b6000546138c98383613f3d565b11156138e3576000546138e090610d208484613f3d565b92505b82156138ff576138f38284613ec1565b600b556138ff8361428d565b505b600c83905533600061391282611ea2565b9050801561398157600f546139279082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205461395a9082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff8316600090815260066020908152604080832093909355338083526004909152918120549081613a2a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6e65656420746f20686176652070656e64696e6720696e206275636b65740000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083208390556003909152902054821115613ac05773ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054613a95908390613ec1565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054925090505b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054613af09083613ec1565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600360205260408082209390935560015483517f42966c680000000000000000000000000000000000000000000000000000000081526004810187905293519216926342966c68926024808301939282900301818387803b158015613b7157600080fd5b505af1158015613b85573d6000803e3d6000fd5b5050600a54613b979250905083613ec1565b600a55613ba38161428d565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902054613bd39083614031565b73ffffffffffffffffffffffffffffffffffffffff841660008181526005602090815260409182902093909355805191825291810184905281517fe6b1330a9c444712d3673f05900d736c42072653e56fb82b5951477832b8d576929181900390910190a1505050505050505050565b60155473ffffffffffffffffffffffffffffffffffffffff1681565b60165473ffffffffffffffffffffffffffffffffffffffff1681565b60036020526000908152604090205481565b3360009081526010602052604090205460ff16613d0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5472616e736d757465723a202177686974656c69737465640000000000000000604482015290519081900360640190fd5b600c54600b5443906000908015613d80576000613d288486613ec1565b90506000548110613d3b57819250613d62565b600054613d488383613f3d565b1115613d6257600054613d5f90610d208484613f3d565b92505b8215613d7e57613d728284613ec1565b600b55613d7e8361428d565b505b600c83905560165474010000000000000000000000000000000000000000900460ff1615613e0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f656d657267656e637920706175736520656e61626c6564000000000000000000604482015290519081900360640190fd5b600254613e349073ffffffffffffffffffffffffffffffffffffffff168730886142f6565b600b54613e419086614031565b600b55613e4c6147b4565b6040805173ffffffffffffffffffffffffffffffffffffffff881681526020810187905281517f33ad5d6b2a46b5457e0d36286a2686a0390b0821dedbbdf8dcdcda64f4782c68929181900390910190a1505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600082821115613f3257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082613f4c57506000613f37565b82820282848281613f5957fe5b0414611f11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153796021913960400191505060405180910390fd5b600080821161402057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161402957fe5b049392505050565b600082820183811015611f1157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008260000182815481106140b657fe5b9060005260206000209060020201905092915050565b3b151590565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261415f9084906148cc565b505050565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156141d557600080fd5b505afa1580156141e9573d6000803e3d6000fd5b505050506040513d60208110156141ff57600080fd5b5051905081811015611e71576012548183039061415f906142209083614031565b6149a4565b60006142326019846140a5565b90506000806142428330866149da565b91509150847fccbd929f935422b28ee209a0db0556280b0a3d9bc4da58f1d3f0ab4f8a4996478383604051808381526020018281526020019250505060405180910390a25050505050565b6000600a5411801561429f5750600081115b156142e3576142cb6142c2600a54610d20600d5485613f3d90919063ffffffff16565b600e5490614031565b600e55600f546142db9082614031565b600f556132ec565b600b546142f09082614031565b600b5550565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261438b9085906148cc565b50505050565b5490565b6000818484111561443e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156144035781810151838201526020016143eb565b50505050905090810190601f1680156144305780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff81166144b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061544c602f913960400191505060405180910390fd5b600254604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9283169284169163fc0c546a916004808301926020929190829003018186803b15801561451f57600080fd5b505afa158015614533573d6000803e3d6000fd5b505050506040513d602081101561454957600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16146145b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153586021913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526018602052604090205460ff161561464c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164617074657220616c726561647920696e2075736500000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116600081815260186020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580518082019091529283528201526146b790601990614a10565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f0821015de34e20b0878a40f6f165801417f53b2017016d7321cacee989c8cfa790600090a250565b60006147086019836140a5565b90506000806147178330614a78565b91509150837fccbd929f935422b28ee209a0db0556280b0a3d9bc4da58f1d3f0ab4f8a4996478383604051808381526020018281526020019250505060405180910390a250505050565b600080836001015461477285614a9f565b1161478257506000905080610eb7565b600061479b856001015461479587614a9f565b90613ec1565b90506147a8858583614b3b565b92509250509250929050565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561482557600080fd5b505afa158015614839573d6000803e3d6000fd5b505050506040513d602081101561484f57600080fd5b505160135460125491925060009161486d91606491610d2091613f3d565b60125490915061487d9082614031565b8211156148a957601254820360006148956019614d52565b90506148a18183614d7d565b505050611e71565b6012546148b69082613ec1565b821015611e715760125482900361415f816149a4565b606061492e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614e5a9092919063ffffffff16565b80519091501561415f5780806020019051602081101561494d57600080fd5b505161415f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615422602a913960400191505060405180910390fd5b60006149b06019614d52565b905060006149bd82614a9f565b9050828110156149cb578092505b821561415f5761415f83614e71565b60008080806149ea878787614e84565b600189015491935091506149fe9082613ec1565b60018801559092509050935093915050565b8154600180820184556000938452602093849020835160029093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921782559190920151910155565b600080614a94838560010154866149da9092919063ffffffff16565b915091509250929050565b8054604080517fd4c3eea0000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163d4c3eea0916004808301926020929190829003018186803b158015614b0957600080fd5b505afa158015614b1d573d6000803e3d6000fd5b505050506040513d6020811015614b3357600080fd5b505192915050565b6000806000614b4986614fb2565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614bb457600080fd5b505afa158015614bc8573d6000803e3d6000fd5b505050506040513d6020811015614bde57600080fd5b505190506000614bed88614a9f565b8854604080517f594d4e3600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b9052915193945091169163594d4e369160448082019260009290919082900301818387803b158015614c6957600080fd5b505af1158015614c7d573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614cea57600080fd5b505afa158015614cfe573d6000803e3d6000fd5b505050506040513d6020811015614d1457600080fd5b505190506000614d248285613ec1565b90506000614d318b614a9f565b90506000614d3f8583613ec1565b929c929b50919950505050505050505050565b600081614d5e8161501c565b81548110614d6857fe5b90600052602060002090600202019050919050565b600080614d8984614fb2565b8454909150614db29073ffffffffffffffffffffffffffffffffffffffff8084169116856140d2565b8354604080517fb6b55f2500000000000000000000000000000000000000000000000000000000815260048101869052905173ffffffffffffffffffffffffffffffffffffffff9092169163b6b55f259160248082019260009290919082900301818387803b158015614e2457600080fd5b505af1158015614e38573d6000803e3d6000fd5b5050506001850154614e4b915084614031565b60018501555081905092915050565b6060614e698484600085615075565b949350505050565b6132ec614e7e601961501c565b82614225565b6000806000614e9286614fb2565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614efd57600080fd5b505afa158015614f11573d6000803e3d6000fd5b505050506040513d6020811015614f2757600080fd5b505190506000614f3688614a9f565b8854604080517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b9052915193945091169163f3fef3a39160448082019260009290919082900301818387803b158015614c6957600080fd5b8054604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163fc0c546a916004808301926020929190829003018186803b158015614b0957600080fd5b60008061502883614391565b9050611f1160016040518060400160405280601181526020017f5661756c742e4c6973743a20656d707479000000000000000000000000000000815250836143959092919063ffffffff16565b6060824710156150d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806153086026913960400191505060405180910390fd5b6150d9856140cc565b61514457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106151ae57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615171565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615210576040519150601f19603f3d011682016040523d82523d6000602084013e615215565b606091505b5091509150615225828286615230565b979650505050505050565b6060831561523f575081611f11565b82511561524f5782518084602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528451602484015284518593919283926044019190850190808383600083156144035781810151838201526020016143eb56fe5472616e736d757465723a206e6f74207061757365642c206f72206e6f7420676f7665726e616e6365206f722073656e74696e656c6e6f7420656e6f7567682066756e647320746f2073657276696365207374616b6573416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5472616e736d757465723a207265776172647320616464726573732063616e6e6f74206265203078302e5472616e736d757465722e7661756c743a20746f6b656e206d69736d617463682e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e736d757465723a20756e7374616b6520616d6f756e742065786365656473206465706f736974656420616d6f756e746d6967726174653a2073657420656d657267656e637920657869742066697273745472616e736d757465723a2063616e6e6f7420696e697469616c697a652072657761726473206164647265737320746f203078305361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645472616e736d757465723a20616374697665207661756c7420616464726573732063616e6e6f74206265203078302e5472616e736d757465723a2073656e74696e656c20616464726573732063616e6e6f74206265203078302ea2646970667358221220812c9412a5b94a4601c37ff0e292b9dd11dfb026a3bdd30dab93fe4412f6bd0864736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c55760003560e01c806381ac45fb116101ff578063c4d66de81161011a578063ec38a862116100ad578063f58c251c1161007c578063f58c251c14610be5578063f93f394c14610bed578063fb93210814610c20578063fc0c546a14610c59576103c5565b8063ec38a86214610b9a578063edaafe2014610bcd578063f1f7920014610bd5578063f39c38a014610bdd576103c5565b8063ddc63262116100e9578063ddc6326214610b21578063e044205e14610b57578063e5711ffc14610b5f578063e9fad8ee14610b92576103c5565b8063c4d66de814610a96578063ce5494bb14610ac9578063d2c2949214610afc578063d42c11e114610b19576103c5565b8063a694fc3a11610192578063b870d59811610161578063b870d598146109de578063bedb86fb14610a11578063bf51929f14610a30578063bff170b914610a63576103c5565b8063a694fc3a14610969578063a704e8ad14610986578063a7c6a100146109b9578063aaf16660146109c1576103c5565b80639ec5a894116101ce5780639ec5a8941461091f5780639f4216e814610927578063a02fbe2d14610944578063a196cf2e14610961576103c5565b806381ac45fb146108bf5780638391e45c146108c75780638456cb59146108fa57806394ff119914610902576103c5565b80632e17de78116102ef57806353d6fd59116102825780636a4f4b05116102515780636a4f4b051461077457806370460eb11461083657806379070a1214610859578063806985f71461088c576103c5565b806353d6fd59146107215780635aa6e6751461075c578063658b98a9146107645780636790fab31461076c576103c5565b80634bf04bd1116102be5780634bf04bd1146106d65780634e71d92d146106de57806352710007146106e6578063538ba4f914610719576103c5565b80632e17de781461064b578063372c12b1146106685780633bbd64bc1461069b5780633cb802b9146106ce576103c5565b80631959a00211610367578063238efcbc11610336578063238efcbc146105ed5780632670fdd8146105f55780632a03cf681461063b5780632a3d7c8114610643576103c5565b80631959a0021461056a5780631acce030146105c35780631aeb1986146105dd5780632113342d146105e5576103c5565b806309dac061116103a357806309dac061146104cb5780630abb6035146104fe5780631486bf6e14610531578063158ef93e1461054e576103c5565b806303036290146103ca57806305d2301d146104865780630668911e146104ac575b600080fd5b6103ed600480360360408110156103e057600080fd5b5080359060200135610c61565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015610431578181015183820152602001610419565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610470578181015183820152602001610458565b5050505090500194505050505060405180910390f35b61048e610ebe565b60408051938452602084019290925282820152519081900360600190f35b6104c9600480360360208110156104c257600080fd5b5035610ef8565b005b6104c9600480360360208110156104e157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610fb9565b6104c96004803603602081101561051457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611124565b6104c96004803603602081101561054757600080fd5b50356112a5565b610556611366565b604080519115158252519081900360200190f35b61059d6004803603602081101561058057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661136f565b604080519485526020850193909352838301919091526060830152519081900360800190f35b6105cb611488565b60408051918252519081900360200190f35b6105cb61148e565b6105cb611494565b6104c961149a565b6106126004803603602081101561060b57600080fd5b503561159c565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6104c96115c8565b6105cb61165a565b6104c96004803603602081101561066157600080fd5b5035611660565b6105566004803603602081101561067e57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118d0565b610556600480360360208110156106b157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166118e5565b6105cb6118fa565b6105cb611900565b6104c9611906565b6105cb600480360360208110156106fc57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611a54565b610612611a66565b6104c96004803603604081101561073757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001351515611a6b565b610612611b80565b6105cb611b9c565b610612611ba2565b6104c96004803603604081101561078a57600080fd5b8101906020810181356401000000008111156107a557600080fd5b8201836020820111156107b757600080fd5b803590602001918460208302840111640100000000831117156107d957600080fd5b9193909290916020810190356401000000008111156107f757600080fd5b82018360208201111561080957600080fd5b8035906020019184602083028401116401000000008311171561082b57600080fd5b509092509050611bbe565b6104c96004803603604081101561084c57600080fd5b5080359060200135611db0565b6105566004803603602081101561086f57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e75565b6105cb600480360360208110156108a257600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611e8a565b6105cb611e9c565b6105cb600480360360208110156108dd57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611ea2565b610556611f18565b6104c96004803603602081101561091857600080fd5b5035611f39565b610612611ffa565b6106126004803603602081101561093d57600080fd5b5035612016565b6104c96004803603602081101561095a57600080fd5b503561203e565b6105cb6120ff565b6104c96004803603602081101561097f57600080fd5b5035612105565b6105cb6004803603602081101561099c57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612531565b6105cb612543565b6105cb600480360360208110156109d757600080fd5b5035612554565b6105cb600480360360208110156109f457600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661256d565b6104c960048036036020811015610a2757600080fd5b5035151561257f565b6104c960048036036020811015610a4657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166126a6565b6104c960048036036020811015610a7957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612a79565b6104c960048036036020811015610aac57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166130c0565b6104c960048036036020811015610adf57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661325d565b6104c960048036036020811015610b1257600080fd5b50356132ef565b6105cb6133af565b610b3e60048036036020811015610b3757600080fd5b50356133b5565b6040805192835260208301919091528051918290030190f35b6104c96134b8565b61055660048036036020811015610b7557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613561565b6104c9613576565b6104c960048036036020811015610bb057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166135fe565b6105cb613769565b6104c961376f565b610612613c43565b610612613c5f565b6105cb60048036036020811015610c0357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613c7b565b6104c960048036036040811015610c3657600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135613c8d565b610612613ea5565b60608083808403828167ffffffffffffffff81118015610c8057600080fd5b50604051908082528060200260200182016040528015610caa578160200160208202803683370190505b50905060608260020267ffffffffffffffff81118015610cc957600080fd5b50604051908082528060200260200182016040528015610cf3578160200160208202803683370190505b509050600080610d26600054610d20610d17600c5443613ec190919063ffffffff16565b600b5490613f3d565b90613fb0565b9050600054610d40600c5443613ec190919063ffffffff16565b1115610d4b5750600b545b60005b85811015610eab57600087815260086020526040902054855173ffffffffffffffffffffffffffffffffffffffff90911690869083908110610d8c57fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092018101919091526000898152600882526040808220549093168152600390915220548451859085908110610ddc57fe5b602090810291909101810191909152600a5460008981526008835260408082205473ffffffffffffffffffffffffffffffffffffffff16825260039093529190912054610e7e91610e3291610d20908690613f3d565b60008981526008602081815260408084205473ffffffffffffffffffffffffffffffffffffffff168085526004835290842054938d9052919052610e7891908290611ea2565b90614031565b848460010181518110610e8d57fe5b60209081029190910101526001968701966002939093019201610d4e565b50929650909450505050505b9250929050565b6000806000610ed8600c5443613ec190919063ffffffff16565b600b546000549193509150610ef190610d208385613f3d565b9250909192565b60145473ffffffffffffffffffffffffffffffffffffffff163314610f7e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b60128190556040805182815290517fe77487d7758cc0f4820329f0d13f96448757377d4bf03ca31ce49cc9e151486f9181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff16331461103f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166110ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b81526020018061547b602b913960400191505060405180910390fd5b6016805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fdc117600f93282860144d2cd2745f8e2e15c3ca2a32b4290c30f7cd1ae7ffcb99181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff1633146111aa57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff811661122c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f5472616e736d757465723a203020676f76000000000000000000000000000000604482015290519081900360640190fd5b6015805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e78399181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff16331461132b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b601c8190556040805182815290517f3bff5293be89c925015798c1dfc042b8a1108bad4eb02ba603aea7ed96ac0cfd9181900360200190a150565b601a5460ff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120548154600c5483928392839283916113b591610d2090610d17904390613ec1565b90506000546113cf600c5443613ec190919063ffffffff16565b11156113da5750600b545b600a5473ffffffffffffffffffffffffffffffffffffffff8816600090815260036020526040812054909161141491610d20908590613f3d565b905060006114506114248a611ea2565b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526004602052604090205490614031565b73ffffffffffffffffffffffffffffffffffffffff999099166000908152600560205260409020549399919897509295509350505050565b60135481565b60125481565b600e5481565b60155473ffffffffffffffffffffffffffffffffffffffff16331461152057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f2170656e64696e67476f7665726e616e63650000000000000000000000000000604482015290519081900360640190fd5b601554601480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040805182815290517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab9181900360200190a150565b6000806115aa6019846140a5565b5473ffffffffffffffffffffffffffffffffffffffff169392505050565b6115d1336140cc565b1580156115dd57503332145b61164857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b61165061376f565b611658611906565b565b600c5481565b611669336140cc565b15801561167557503332145b6116e057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b3360006116ec82611ea2565b9050801561175b57600f546117019082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546117349082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff8316600090815260066020908152604080832093909355338083526003909152919020548411156117ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603381526020018061539a6033913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604090205461181f9085613ec1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902055600a546118529085613ec1565b600a556001546118799073ffffffffffffffffffffffffffffffffffffffff1682866140d2565b6040805173ffffffffffffffffffffffffffffffffffffffff831681526020810186905281517f51c9b122c2b81c914282042bf02d3a8965f5a0b1ad37b6dab1cb77bb343ce556929181900390910190a150505050565b60106020526000908152604090205460ff1681565b60116020526000908152604090205460ff1681565b600f5481565b600a5481565b61190f336140cc565b15801561191b57503332145b61198657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b3360008181526005602052604090205461199f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260056020526040812080549190556119d281614164565b6002546119f69073ffffffffffffffffffffffffffffffffffffffff1683836140d2565b6002546040805173ffffffffffffffffffffffffffffffffffffffff80861682529092166020830152818101839052517f4831bdd9dcf3048a28319ce81d3cab7a15366bcf449bc7803a539107440809cc9181900360600190a15050565b60056020526000908152604090205481565b600081565b60145473ffffffffffffffffffffffffffffffffffffffff163314611af157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526010602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915582519384529083015280517f0aa5ec5ffdc7f6f9c4d0dded489d7450297155cb2f71cb771e02427f7dff4f519281900390910190a15050565b60145473ffffffffffffffffffffffffffffffffffffffff1681565b600d5481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60145473ffffffffffffffffffffffffffffffffffffffff163314611c4457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b8260005b81811015611cd957838382818110611c5c57fe5b90506020020135151560116000888885818110611c7557fe5b6020908102929092013573ffffffffffffffffffffffffffffffffffffffff1683525081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055600101611c48565b507fd1721b10ac5fe95d2627d512aa0f92c34ada0347c874adf414cf51af5760ff56858585856040518080602001806020018381038352878782818152602001925060200280828437600083820152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169091018481038352858152602090810191508690860280828437600083820152604051601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169092018290039850909650505050505050a15050505050565b60165474010000000000000000000000000000000000000000900460ff168015611e12575060145473ffffffffffffffffffffffffffffffffffffffff16331480611e12575060165473ffffffffffffffffffffffffffffffffffffffff1633145b611e67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806152b16035913960400191505060405180910390fd5b611e718282614225565b5050565b60076020526000908152604090205460ff1681565b60066020526000908152604090205481565b60005481565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260066020526040812054600e548291611ed79190613ec1565b600d5473ffffffffffffffffffffffffffffffffffffffff8516600090815260036020526040902054919250611f1191610d209084613f3d565b9392505050565b60165474010000000000000000000000000000000000000000900460ff1681565b60145473ffffffffffffffffffffffffffffffffffffffff163314611fbf57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b60138190556040805182815290517fcf837c6f8ba9f94fb0b21939d04aba4ae1cf50cbeca85513c218dfdc6666f1a99181900360200190a150565b60175473ffffffffffffffffffffffffffffffffffffffff1681565b60086020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60145473ffffffffffffffffffffffffffffffffffffffff1633146120c457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b60008190556040805182815290517fc2965d898897107f6f1d0e43c043ca07b7a51d487acfac1decec2ec8405364409181900360200190a150565b60095481565b61210e336140cc565b15801561211a57503332145b61218557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b601c54336000908152601b60205260409020546121a3904390613ec1565b101561221057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f616374696f6e2064656c6179206e6f74206d6574000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604081204390819055600c54600b54909290801561229757600061223f8486613ec1565b9050600054811061225257819250612279565b60005461225f8383613f3d565b11156122795760005461227690610d208484613f3d565b92505b8215612295576122898284613ec1565b600b556122958361428d565b505b600c8390553360006122a882611ea2565b9050801561231757600f546122bd9082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260409020546122f09082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083209390935533825260079052205460ff166123d15760098054600090815260086020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915583526007909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581540190555b60165474010000000000000000000000000000000000000000900460ff161561245b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f656d657267656e637920706175736520656e61626c6564000000000000000000604482015290519081900360640190fd5b60015433906124829073ffffffffffffffffffffffffffffffffffffffff1682308b6142f6565b600a5461248f9089614031565b600a5573ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020546124c29089614031565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600360209081526040918290209390935580519182529181018a905281517fd2c11ddc796e75881f492256edb3cb3bf4c7a7761682320c5798a8dbb3662d88929181900390910190a15050505050505050565b601b6020526000908152604090205481565b600061254f6019614391565b905090565b6000806125626019846140a5565b600101549392505050565b60046020526000908152604090205481565b60145473ffffffffffffffffffffffffffffffffffffffff163314806125bc575060165473ffffffffffffffffffffffffffffffffffffffff1633145b61262757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f2128676f76207c7c2073656e74696e656c290000000000000000000000000000604482015290519081900360640190fd5b601680548215157401000000000000000000000000000000000000000081027fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff9092169190911790915560408051918252517f77860e247ab9186dbe64e5bd0e0b93273cc4273e01818420e788f500078886f59181900360200190a150565b60145473ffffffffffffffffffffffffffffffffffffffff16331461272c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166127ae57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f63616e6e6f74206d69677261746520746f203078300000000000000000000000604482015290519081900360640190fd5b60165474010000000000000000000000000000000000000000900460ff16612821576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153cd6021913960400191505060405180910390fd5b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561289257600080fd5b505afa1580156128a6573d6000803e3d6000fd5b505050506040513d60208110156128bc57600080fd5b5051600a54604080516060810190915260228082529293506000926128ed9291906152e66020830139849190614395565b600254604080517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260248201859052915193945091169163095ea7b3916044808201926020929091908290030181600087803b15801561296b57600080fd5b505af115801561297f573d6000803e3d6000fd5b505050506040513d602081101561299557600080fd5b5050604080517ffb93210800000000000000000000000000000000000000000000000000000000815230600482015260248101839052905173ffffffffffffffffffffffffffffffffffffffff85169163fb93210891604480830192600092919082900301818387803b158015612a0b57600080fd5b505af1158015612a1f573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff871681526020810185905281517f491c0362a655f805cc3d5ab67c471c6b4e517051540c85134456449ce6c1a6799450908190039091019150a1505050565b612a82336140cc565b158015612a8e57503332145b612af957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b601c54336000908152601b6020526040902054612b17904390613ec1565b1015612b8457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f616374696f6e2064656c6179206e6f74206d6574000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604081204390819055600c54600b549092908015612c0b576000612bb38486613ec1565b90506000548110612bc657819250612bed565b600054612bd38383613f3d565b1115612bed57600054612bea90610d208484613f3d565b92505b8215612c0957612bfd8284613ec1565b600b55612c098361428d565b505b600c839055336000612c1c82611ea2565b90508015612c8b57600f54612c319082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054612c649082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120919091558790612cc282611ea2565b90508015612d3157600f54612cd79082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054612d0a9082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083209390935533825260079052205460ff16612deb5760098054600090815260086020908152604080832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000163390811790915583526007909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915581540190555b73ffffffffffffffffffffffffffffffffffffffff89166000908152600460209081526040808320546003909252909120543391908111612e8d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f5472616e736d757465723a20216f766572666c6f770000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8b1660009081526004602090815260408083208390556003909152812054612ecb908390613ec1565b73ffffffffffffffffffffffffffffffffffffffff808e1660009081526003602052604080822080549083905560015482517f42966c6800000000000000000000000000000000000000000000000000000000815260048101839052925191975094955093909216926342966c6892602480820193929182900301818387803b158015612f5757600080fd5b505af1158015612f6b573d6000803e3d6000fd5b5050600a54612f7d9250905083613ec1565b600a5573ffffffffffffffffffffffffffffffffffffffff8316600090815260046020526040902054612fb09082614031565b73ffffffffffffffffffffffffffffffffffffffff808516600090815260046020908152604080832094909455918f16815260059091522054612ff39083614031565b73ffffffffffffffffffffffffffffffffffffffff8d16600090815260056020526040902081905561302481614164565b73ffffffffffffffffffffffffffffffffffffffff808e1660009081526005602052604081205560025461305a91168e836140d2565b6040805173ffffffffffffffffffffffffffffffffffffffff80871682528f16602082015280820183905290517fb1e35379b2ed6821c33158f59080978024478baafa855571cd84e46b9848b3ce9181900360600190a150505050505050505050505050565b60145473ffffffffffffffffffffffffffffffffffffffff16331461314657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b601a5460ff16156131b857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5472616e736d757465723a20616c726561647920696e697469616c697a656400604482015290519081900360640190fd5b60175473ffffffffffffffffffffffffffffffffffffffff16613226576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806153ee6034913960400191505060405180910390fd5b61322f81614446565b50601a80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60145473ffffffffffffffffffffffffffffffffffffffff1633146132e357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b6132ec81614446565b50565b60165474010000000000000000000000000000000000000000900460ff168015613351575060145473ffffffffffffffffffffffffffffffffffffffff16331480613351575060165473ffffffffffffffffffffffffffffffffffffffff1633145b6133a6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260358152602001806152b16035913960400191505060405180910390fd5b6132ec816146fb565b601c5481565b33600090815260116020526040812054819060ff1661343557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f5472616e736d757465723a20216b656570657200000000000000000000000000604482015290519081900360640190fd5b60006134426019856140a5565b601754909150600090819061346e90849073ffffffffffffffffffffffffffffffffffffffff16614761565b604080518381526020810183905281519395509193507f11d2034f4471d11a13f0f1798ceaf0c9db2812d450a0681958ce7d4f2fb97f0992918290030190a1909350915050915091565b6134c1336140cc565b1580156134cd57503332145b61353857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b61354061376f565b613548611906565b336000908152600360205260409020546132ec81611660565b60186020526000908152604090205460ff1681565b61357f336140cc565b15801561358b57503332145b6135f657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b61354861376f565b60145473ffffffffffffffffffffffffffffffffffffffff16331461368457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f5472616e736d757465723a2021676f7665726e616e6365000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166136f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a81526020018061532e602a913960400191505060405180910390fd5b6017805473ffffffffffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560408051918252517f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf9181900360200190a150565b600b5481565b613778336140cc565b15801561378457503332145b6137ef57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f6e6f20636f6e74726163742063616c6c73000000000000000000000000000000604482015290519081900360640190fd5b601c54336000908152601b602052604090205461380d904390613ec1565b101561387a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f616374696f6e2064656c6179206e6f74206d6574000000000000000000000000604482015290519081900360640190fd5b336000908152601b602052604081204390819055600c54600b5490929080156139015760006138a98486613ec1565b905060005481106138bc578192506138e3565b6000546138c98383613f3d565b11156138e3576000546138e090610d208484613f3d565b92505b82156138ff576138f38284613ec1565b600b556138ff8361428d565b505b600c83905533600061391282611ea2565b9050801561398157600f546139279082613ec1565b600f5573ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205461395a9082614031565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600460205260409020555b600e5473ffffffffffffffffffffffffffffffffffffffff8316600090815260066020908152604080832093909355338083526004909152918120549081613a2a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6e65656420746f20686176652070656e64696e6720696e206275636b65740000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff831660009081526004602090815260408083208390556003909152902054821115613ac05773ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054613a95908390613ec1565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054925090505b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040902054613af09083613ec1565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600360205260408082209390935560015483517f42966c680000000000000000000000000000000000000000000000000000000081526004810187905293519216926342966c68926024808301939282900301818387803b158015613b7157600080fd5b505af1158015613b85573d6000803e3d6000fd5b5050600a54613b979250905083613ec1565b600a55613ba38161428d565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260056020526040902054613bd39083614031565b73ffffffffffffffffffffffffffffffffffffffff841660008181526005602090815260409182902093909355805191825291810184905281517fe6b1330a9c444712d3673f05900d736c42072653e56fb82b5951477832b8d576929181900390910190a1505050505050505050565b60155473ffffffffffffffffffffffffffffffffffffffff1681565b60165473ffffffffffffffffffffffffffffffffffffffff1681565b60036020526000908152604090205481565b3360009081526010602052604090205460ff16613d0b57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5472616e736d757465723a202177686974656c69737465640000000000000000604482015290519081900360640190fd5b600c54600b5443906000908015613d80576000613d288486613ec1565b90506000548110613d3b57819250613d62565b600054613d488383613f3d565b1115613d6257600054613d5f90610d208484613f3d565b92505b8215613d7e57613d728284613ec1565b600b55613d7e8361428d565b505b600c83905560165474010000000000000000000000000000000000000000900460ff1615613e0f57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f656d657267656e637920706175736520656e61626c6564000000000000000000604482015290519081900360640190fd5b600254613e349073ffffffffffffffffffffffffffffffffffffffff168730886142f6565b600b54613e419086614031565b600b55613e4c6147b4565b6040805173ffffffffffffffffffffffffffffffffffffffff881681526020810187905281517f33ad5d6b2a46b5457e0d36286a2686a0390b0821dedbbdf8dcdcda64f4782c68929181900390910190a1505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600082821115613f3257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600082613f4c57506000613f37565b82820282848281613f5957fe5b0414611f11576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153796021913960400191505060405180910390fd5b600080821161402057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161402957fe5b049392505050565b600082820183811015611f1157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60008260000182815481106140b657fe5b9060005260206000209060020201905092915050565b3b151590565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261415f9084906148cc565b505050565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b1580156141d557600080fd5b505afa1580156141e9573d6000803e3d6000fd5b505050506040513d60208110156141ff57600080fd5b5051905081811015611e71576012548183039061415f906142209083614031565b6149a4565b60006142326019846140a5565b90506000806142428330866149da565b91509150847fccbd929f935422b28ee209a0db0556280b0a3d9bc4da58f1d3f0ab4f8a4996478383604051808381526020018281526020019250505060405180910390a25050505050565b6000600a5411801561429f5750600081115b156142e3576142cb6142c2600a54610d20600d5485613f3d90919063ffffffff16565b600e5490614031565b600e55600f546142db9082614031565b600f556132ec565b600b546142f09082614031565b600b5550565b6040805173ffffffffffffffffffffffffffffffffffffffff80861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261438b9085906148cc565b50505050565b5490565b6000818484111561443e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156144035781810151838201526020016143eb565b50505050905090810190601f1680156144305780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b73ffffffffffffffffffffffffffffffffffffffff81166144b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018061544c602f913960400191505060405180910390fd5b600254604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9283169284169163fc0c546a916004808301926020929190829003018186803b15801561451f57600080fd5b505afa158015614533573d6000803e3d6000fd5b505050506040513d602081101561454957600080fd5b505173ffffffffffffffffffffffffffffffffffffffff16146145b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806153586021913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660009081526018602052604090205460ff161561464c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4164617074657220616c726561647920696e2075736500000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116600081815260186020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580518082019091529283528201526146b790601990614a10565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f0821015de34e20b0878a40f6f165801417f53b2017016d7321cacee989c8cfa790600090a250565b60006147086019836140a5565b90506000806147178330614a78565b91509150837fccbd929f935422b28ee209a0db0556280b0a3d9bc4da58f1d3f0ab4f8a4996478383604051808381526020018281526020019250505060405180910390a250505050565b600080836001015461477285614a9f565b1161478257506000905080610eb7565b600061479b856001015461479587614a9f565b90613ec1565b90506147a8858583614b3b565b92509250509250929050565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905160009273ffffffffffffffffffffffffffffffffffffffff16916370a08231916024808301926020929190829003018186803b15801561482557600080fd5b505afa158015614839573d6000803e3d6000fd5b505050506040513d602081101561484f57600080fd5b505160135460125491925060009161486d91606491610d2091613f3d565b60125490915061487d9082614031565b8211156148a957601254820360006148956019614d52565b90506148a18183614d7d565b505050611e71565b6012546148b69082613ec1565b821015611e715760125482900361415f816149a4565b606061492e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614e5a9092919063ffffffff16565b80519091501561415f5780806020019051602081101561494d57600080fd5b505161415f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615422602a913960400191505060405180910390fd5b60006149b06019614d52565b905060006149bd82614a9f565b9050828110156149cb578092505b821561415f5761415f83614e71565b60008080806149ea878787614e84565b600189015491935091506149fe9082613ec1565b60018801559092509050935093915050565b8154600180820184556000938452602093849020835160029093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9093169290921782559190920151910155565b600080614a94838560010154866149da9092919063ffffffff16565b915091509250929050565b8054604080517fd4c3eea0000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163d4c3eea0916004808301926020929190829003018186803b158015614b0957600080fd5b505afa158015614b1d573d6000803e3d6000fd5b505050506040513d6020811015614b3357600080fd5b505192915050565b6000806000614b4986614fb2565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614bb457600080fd5b505afa158015614bc8573d6000803e3d6000fd5b505050506040513d6020811015614bde57600080fd5b505190506000614bed88614a9f565b8854604080517f594d4e3600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b9052915193945091169163594d4e369160448082019260009290919082900301818387803b158015614c6957600080fd5b505af1158015614c7d573d6000803e3d6000fd5b5050505060008373ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614cea57600080fd5b505afa158015614cfe573d6000803e3d6000fd5b505050506040513d6020811015614d1457600080fd5b505190506000614d248285613ec1565b90506000614d318b614a9f565b90506000614d3f8583613ec1565b929c929b50919950505050505050505050565b600081614d5e8161501c565b81548110614d6857fe5b90600052602060002090600202019050919050565b600080614d8984614fb2565b8454909150614db29073ffffffffffffffffffffffffffffffffffffffff8084169116856140d2565b8354604080517fb6b55f2500000000000000000000000000000000000000000000000000000000815260048101869052905173ffffffffffffffffffffffffffffffffffffffff9092169163b6b55f259160248082019260009290919082900301818387803b158015614e2457600080fd5b505af1158015614e38573d6000803e3d6000fd5b5050506001850154614e4b915084614031565b60018501555081905092915050565b6060614e698484600085615075565b949350505050565b6132ec614e7e601961501c565b82614225565b6000806000614e9286614fb2565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231876040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015614efd57600080fd5b505afa158015614f11573d6000803e3d6000fd5b505050506040513d6020811015614f2757600080fd5b505190506000614f3688614a9f565b8854604080517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b81166004830152602482018b9052915193945091169163f3fef3a39160448082019260009290919082900301818387803b158015614c6957600080fd5b8054604080517ffc0c546a000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163fc0c546a916004808301926020929190829003018186803b158015614b0957600080fd5b60008061502883614391565b9050611f1160016040518060400160405280601181526020017f5661756c742e4c6973743a20656d707479000000000000000000000000000000815250836143959092919063ffffffff16565b6060824710156150d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806153086026913960400191505060405180910390fd5b6150d9856140cc565b61514457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106151ae57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101615171565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615210576040519150601f19603f3d011682016040523d82523d6000602084013e615215565b606091505b5091509150615225828286615230565b979650505050505050565b6060831561523f575081611f11565b82511561524f5782518084602001fd5b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526020600482018181528451602484015284518593919283926044019190850190808383600083156144035781810151838201526020016143eb56fe5472616e736d757465723a206e6f74207061757365642c206f72206e6f7420676f7665726e616e6365206f722073656e74696e656c6e6f7420656e6f7567682066756e647320746f2073657276696365207374616b6573416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5472616e736d757465723a207265776172647320616464726573732063616e6e6f74206265203078302e5472616e736d757465722e7661756c743a20746f6b656e206d69736d617463682e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775472616e736d757465723a20756e7374616b6520616d6f756e742065786365656473206465706f736974656420616d6f756e746d6967726174653a2073657420656d657267656e637920657869742066697273745472616e736d757465723a2063616e6e6f7420696e697469616c697a652072657761726473206164647265737320746f203078305361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645472616e736d757465723a20616374697665207661756c7420616464726573732063616e6e6f74206265203078302e5472616e736d757465723a2073656e74696e656c20616464726573732063616e6e6f74206265203078302ea2646970667358221220812c9412a5b94a4601c37ff0e292b9dd11dfb026a3bdd30dab93fe4412f6bd0864736f6c634300060c0033",
  "devdoc": {
    "details": "Implementation of the {IERC20Burnable} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin guidelines: functions revert instead of returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20Burnable-approve}.",
    "kind": "dev",
    "methods": {
      "acceptGovernance()": {
        "details": "Accepts the role as governance. This function reverts if the caller is not the new pending governance."
      },
      "bufferInfo()": {
        "details": "Gets info on the buffer This function is used to query the contract to get the latest state of the buffer",
        "returns": {
          "_buffer": "the amount in the buffer ",
          "_deltaBlocks": "the amount of time since the last phased distribution",
          "_toDistribute": "the amount ready to be distributed"
        }
      },
      "claim()": {
        "details": "claims the base token after it has been transmuted This function reverts if there is no realisedToken balance"
      },
      "distribute(address,uint256)": {
        "details": "Distributes the base token proportionally to all alToken stakers. This function is meant to be called by the Alchemist contract for when it is sending yield to the transmuter.  Anyone can call this and add funds, idk why they would do that though...",
        "params": {
          "amount": "the amount of base tokens to be distributed to the transmuter.",
          "origin": "the account that is sending the tokens to be distributed."
        }
      },
      "dividendsOwing(address)": {
        "returns": {
          "_0": "displays the user's share of the pooled alTokens."
        }
      },
      "exit()": {
        "details": "Transmutes and unstakes all alTokens This function combines the transmute and unstake functions for ease of use"
      },
      "forceTransmute(address)": {
        "details": "Executes transmute() on another account that has had more base tokens allocated to it than alTokens staked. The caller of this function will have the surlus base tokens credited to their tokensInBucket balance, rewarding them for performing this action This function reverts if the address to transmute is not over-filled.",
        "params": {
          "toTransmute": "address of the account you will force transmute."
        }
      },
      "getMultipleUserInfo(uint256,uint256)": {
        "details": "Gets the status of multiple users in one call This function is used to query the contract to check for accounts that have overfilled positions in order to check  who can be force transmuted.",
        "params": {
          "from": "the first index of the userList",
          "to": "the last index of the userList returns the userList with their staking status in paginated form. "
        }
      },
      "getVaultAdapter(uint256)": {
        "details": "Get the adapter of a vault.",
        "params": {
          "_vaultId": "the identifier of the vault."
        },
        "returns": {
          "_0": "the vault adapter."
        }
      },
      "getVaultTotalDeposited(uint256)": {
        "details": "Get the total amount of the parent asset that has been deposited into a vault.",
        "params": {
          "_vaultId": "the identifier of the vault."
        },
        "returns": {
          "_0": "the total amount of deposited tokens."
        }
      },
      "harvest(uint256)": {
        "details": "Harvests yield from a vault.",
        "params": {
          "_vaultId": "the identifier of the vault to harvest from."
        },
        "returns": {
          "_0": "the amount of funds that were harvested from the vault."
        }
      },
      "initialize(address)": {
        "details": "Initializes the contract. This function checks that the transmuter and rewards have been set and sets up the active vault.",
        "params": {
          "_adapter": "the vault adapter of the active vault."
        }
      },
      "migrateFunds(address)": {
        "details": "Migrates transmuter funds to a new transmuter",
        "params": {
          "migrateTo": "address of the new transmuter"
        }
      },
      "recallAllFundsFromVault(uint256)": {
        "details": "Recalls all planted funds from a target vault",
        "params": {
          "_vaultId": "the id of the vault from which to recall funds"
        }
      },
      "recallFundsFromVault(uint256,uint256)": {
        "details": "Recalls planted funds from a target vault",
        "params": {
          "_amount": "the amount of funds to recall",
          "_vaultId": "the id of the vault from which to recall funds"
        }
      },
      "setKeepers(address[],bool[])": {
        "details": "Sets the keeper list This function reverts if the caller is not governance",
        "params": {
          "_keepers": "the accounts to set states for.",
          "_states": "the accounts states."
        }
      },
      "setMinUserActionDelay(uint256)": {
        "details": "Sets the minUserActionDelay  This function reverts if the caller is not the current governance.",
        "params": {
          "_minUserActionDelay": "the new min user action delay."
        }
      },
      "setPause(bool)": {
        "details": "Sets if the contract should enter emergency exit mode. There are 2 main reasons to pause:     1. Need to shut down deposits in case of an emergency in one of the vaults     2. Need to migrate to a new transmuter While the transmuter is paused, deposit() and distribute() are disabled",
        "params": {
          "_pause": "if the contract should enter emergency exit mode."
        }
      },
      "setPendingGovernance(address)": {
        "details": "Sets the pending governance. This function reverts if the new pending governance is the zero address or the caller is not the current governance. This is to prevent the contract governance being set to the zero address which would deadlock privileged contract functionality.",
        "params": {
          "_pendingGovernance": "the new pending governance."
        }
      },
      "setPlantableMargin(uint256)": {
        "details": "Sets the plantableThreshold margin for triggering the planting or recalling of funds on harvest This function reverts if the caller is not the current governance.",
        "params": {
          "_plantableMargin": "the new plantable margin."
        }
      },
      "setPlantableThreshold(uint256)": {
        "details": "Sets the threshold of total held funds above which excess funds will be planted in yield farms. This function reverts if the caller is not the current governance.",
        "params": {
          "_plantableThreshold": "the new plantable threshold."
        }
      },
      "setRewards(address)": {
        "details": "Sets the rewards contract. This function reverts if the new rewards contract is the zero address or the caller is not the current governance.",
        "params": {
          "_rewards": "the new rewards contract."
        }
      },
      "setSentinel(address)": {
        "details": "Sets the address of the sentinel",
        "params": {
          "_sentinel": "address of the new sentinel"
        }
      },
      "setTransmutationPeriod(uint256)": {
        "details": "set the transmutationPeriod variable sets the length (in blocks) of one full distribution phase"
      },
      "setWhitelist(address,bool)": {
        "details": "Sets the whitelist This function reverts if the caller is not governance",
        "params": {
          "_state": "the whitelist state.",
          "_toWhitelist": "the address to alter whitelist permissions."
        }
      },
      "stake(uint256)": {
        "details": "Deposits alTokens into the transmuter ",
        "params": {
          "amount": "the amount of alTokens to stake"
        }
      },
      "transmute()": {
        "details": "Converts the staked alTokens to the base tokens in amount of the sum of pendingdivs and tokensInBucket once the alToken has been converted, it is burned, and the base token becomes realisedTokens which can be recieved using claim()     reverts if there are no pendingdivs or tokensInBucket"
      },
      "transmuteAndClaim()": {
        "details": "Transmutes and claims all converted base tokens. This function combines the transmute and claim functions while leaving your remaining alTokens staked."
      },
      "transmuteClaimAndWithdraw()": {
        "details": "Transmutes, claims base tokens, and withdraws alTokens. This function helps users to exit the transmuter contract completely after converting their alTokens to the base pair."
      },
      "unstake(uint256)": {
        "details": "Withdraws staked alTokens from the transmuter This function reverts if you try to draw more tokens than you deposited",
        "params": {
          "amount": "the amount of alTokens to unstake"
        }
      },
      "userInfo(address)": {
        "details": "Gets the status of a user's staking position. The total amount allocated to a user is the sum of pendingdivs and inbucket.",
        "params": {
          "user": "the address of the user you wish to query. returns user status"
        }
      },
      "vaultCount()": {
        "details": "Gets the number of vaults in the vault list.",
        "returns": {
          "_0": "the vault count."
        }
      }
    },
    "stateVariables": {
      "_vaults": {
        "details": "A list of all of the vaults. The last element of the list is the vault that is currently being used for deposits and withdraws. VaultWithIndirections before the last element are considered inactive and are expected to be cleared."
      },
      "adapters": {
        "details": "A mapping of adapter addresses to keep track of vault adapters that have already been added"
      },
      "governance": {
        "details": "The address of the account which currently has administrative capabilities over this contract."
      },
      "initialized": {
        "details": "make sure the contract is only initialized once."
      },
      "keepers": {
        "details": "addresses whitelisted to run keepr jobs (harvest)"
      },
      "lastUserAction": {
        "details": "mapping of user account to the last block they acted"
      },
      "minUserActionDelay": {
        "details": "number of blocks to delay between allowed user actions"
      },
      "pause": {
        "details": "A flag indicating if deposits and flushes should be halted and if all parties should be able to recall from the active vault."
      },
      "pendingGovernance": {
        "details": "The address of the pending governance."
      },
      "plantableMargin": {
        "details": "The % margin to trigger planting or recalling of funds"
      },
      "plantableThreshold": {
        "details": "The threshold above which excess funds will be deployed to yield farming activities"
      },
      "pointMultiplier": {
        "details": "values needed to calculate the distribution of base asset in proportion for alTokens staked"
      },
      "rewards": {
        "details": "The address of the contract which will receive fees."
      },
      "sentinel": {
        "details": "The address of the account which can perform emergency activities"
      },
      "whiteList": {
        "details": "alchemist addresses whitelisted"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11264,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "transmutationPeriod",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 11266,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "alToken",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 11268,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11272,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "depositedAlTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11276,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "tokensInBucket",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11280,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "realisedTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11284,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "lastDividendPoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11288,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "userIsKnown",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11292,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "userList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11294,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "nextUser",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11296,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "totalSupplyAltokens",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 11298,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "buffer",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11300,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "lastDepositBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11304,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "pointMultiplier",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11306,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "totalDividendPoints",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11308,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "unclaimedDividends",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 11313,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "whiteList",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11318,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "keepers",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11322,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "plantableThreshold",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 11326,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "plantableMargin",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 11329,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "governance",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 11332,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 11335,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "sentinel",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 11338,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "pause",
        "offset": 20,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 11341,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "rewards",
        "offset": 0,
        "slot": "23",
        "type": "t_address"
      },
      {
        "astId": 11346,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "adapters",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_contract(YearnVaultAdapterWithIndirection)18390,t_bool)"
      },
      {
        "astId": 11349,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "_vaults",
        "offset": 0,
        "slot": "25",
        "type": "t_struct(List)20276_storage"
      },
      {
        "astId": 11352,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "initialized",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 11357,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "lastUserAction",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11360,
        "contract": "contracts/TransmuterB.sol:TransmuterB",
        "label": "minUserActionDelay",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Data)20272_storage)dyn_storage": {
        "base": "t_struct(Data)20272_storage",
        "encoding": "dynamic_array",
        "label": "struct VaultWithIndirection.Data[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(YearnVaultAdapterWithIndirection)18390": {
        "encoding": "inplace",
        "label": "contract YearnVaultAdapterWithIndirection",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(YearnVaultAdapterWithIndirection)18390,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(YearnVaultAdapterWithIndirection)18390",
        "label": "mapping(contract YearnVaultAdapterWithIndirection => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Data)20272_storage": {
        "encoding": "inplace",
        "label": "struct VaultWithIndirection.Data",
        "members": [
          {
            "astId": 20269,
            "contract": "contracts/TransmuterB.sol:TransmuterB",
            "label": "adapter",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(YearnVaultAdapterWithIndirection)18390"
          },
          {
            "astId": 20271,
            "contract": "contracts/TransmuterB.sol:TransmuterB",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(List)20276_storage": {
        "encoding": "inplace",
        "label": "struct VaultWithIndirection.List",
        "members": [
          {
            "astId": 20275,
            "contract": "contracts/TransmuterB.sol:TransmuterB",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Data)20272_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}