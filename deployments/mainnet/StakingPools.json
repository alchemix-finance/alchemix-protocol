{
  "address": "0xAB8e74017a8Cc7c15FFcCd726603790d26d7DeCa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMintableERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "governance",
          "type": "address"
        }
      ],
      "name": "GovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pendingGovernance",
          "type": "address"
        }
      ],
      "name": "PendingGovernanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "PoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardWeight",
          "type": "uint256"
        }
      ],
      "name": "PoolRewardWeightUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        }
      ],
      "name": "RewardRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "createPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolRewardWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getPoolTotalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getStakeTotalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        }
      ],
      "name": "getStakeTotalUnclaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IMintableERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pendingGovernance",
          "type": "address"
        }
      ],
      "name": "setPendingGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardRate",
          "type": "uint256"
        }
      ],
      "name": "setRewardRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rewardWeights",
          "type": "uint256[]"
        }
      ],
      "name": "setRewardWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPoolIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewardWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_poolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x338fd703d597aaa9b3c5719eb16617842a8e773d014d6708fdd63deda7387182",
  "receipt": {
    "to": null,
    "from": "0x51e029a5Ef288Fb87C5e8Dd46895c353ad9AaAeC",
    "contractAddress": "0xAB8e74017a8Cc7c15FFcCd726603790d26d7DeCa",
    "transactionIndex": 231,
    "gasUsed": "1708869",
    "logsBloom": "0x
    "blockHash": "0x1f461dad772897cda2e0a9376d0abbf2112fc6a54fae0a03b700bebf4511d934",
    "transactionHash": "0x338fd703d597aaa9b3c5719eb16617842a8e773d014d6708fdd63deda7387182",
    "logs": [],
    "blockNumber": 11937279,
    "cumulativeGasUsed": "11982932",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF",
    "0x51e029a5Ef288Fb87C5e8Dd46895c353ad9AaAeC"
  ],
  "solcInputHash": "a885e78562f5bae54a8e3e04018de494",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governance\",\"type\":\"address\"}],\"name\":\"GovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pendingGovernance\",\"type\":\"address\"}],\"name\":\"PendingGovernanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"PoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardWeight\",\"type\":\"uint256\"}],\"name\":\"PoolRewardWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"RewardRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"createPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"}],\"name\":\"getStakeTotalUnclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IMintableERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pendingGovernance\",\"type\":\"address\"}],\"name\":\"setPendingGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardWeights\",\"type\":\"uint256[]\"}],\"name\":\"setRewardWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPoolIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewardWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract which allows users to stake to farm tokens. This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this repository: https://github.com/sushiswap/sushiswap.\",\"kind\":\"dev\",\"methods\":{\"claim(uint256)\":{\"details\":\"Claims all rewarded tokens from a pool.\",\"params\":{\"_poolId\":\"The pool to claim rewards from.\"}},\"createPool(address)\":{\"details\":\"Creates a new pool. The created pool will need to have its reward weight initialized before it begins generating rewards.\",\"params\":{\"_token\":\"The token the pool will accept for staking.\"},\"returns\":{\"_0\":\"the identifier for the newly created pool.\"}},\"deposit(uint256,uint256)\":{\"details\":\"Stakes tokens into a pool.\",\"params\":{\"_depositAmount\":\"the amount of tokens to deposit.\",\"_poolId\":\"the pool to deposit tokens into.\"}},\"exit(uint256)\":{\"details\":\"Claims all rewards from a pool and then withdraws all staked tokens.\",\"params\":{\"_poolId\":\"the pool to exit from.\"}},\"getPoolRewardRate(uint256)\":{\"details\":\"Gets the amount of tokens per block being distributed to stakers for a pool.\",\"params\":{\"_poolId\":\"the identifier of the pool.\"},\"returns\":{\"_0\":\"the pool reward rate.\"}},\"getPoolRewardWeight(uint256)\":{\"details\":\"Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\",\"params\":{\"_poolId\":\"the identifier of the pool.\"},\"returns\":{\"_0\":\"the pool reward weight.\"}},\"getPoolToken(uint256)\":{\"details\":\"Gets the token a pool accepts.\",\"params\":{\"_poolId\":\"the identifier of the pool.\"},\"returns\":{\"_0\":\"the token.\"}},\"getPoolTotalDeposited(uint256)\":{\"details\":\"Gets the total amount of funds staked in a pool.\",\"params\":{\"_poolId\":\"the identifier of the pool.\"},\"returns\":{\"_0\":\"the total amount of staked or deposited tokens.\"}},\"getStakeTotalDeposited(address,uint256)\":{\"details\":\"Gets the number of tokens a user has staked into a pool.\",\"params\":{\"_account\":\"The account to query.\",\"_poolId\":\"the identifier of the pool.\"},\"returns\":{\"_0\":\"the amount of deposited tokens.\"}},\"getStakeTotalUnclaimed(address,uint256)\":{\"details\":\"Gets the number of unclaimed reward tokens a user can claim from a pool.\",\"params\":{\"_account\":\"The account to get the unclaimed balance of.\",\"_poolId\":\"The pool to check for unclaimed rewards.\"},\"returns\":{\"_0\":\"the amount of unclaimed reward tokens a user has in a pool.\"}},\"poolCount()\":{\"details\":\"Gets the number of pools that exist.\",\"returns\":{\"_0\":\"the pool count.\"}},\"rewardRate()\":{\"details\":\"Gets the rate at which tokens are minted to stakers for all pools.\",\"returns\":{\"_0\":\"the reward rate.\"}},\"setPendingGovernance(address)\":{\"details\":\"Sets the governance. This function can only called by the current governance.\",\"params\":{\"_pendingGovernance\":\"the new pending governance.\"}},\"setRewardRate(uint256)\":{\"details\":\"Sets the distribution reward rate. This will update all of the pools.\",\"params\":{\"_rewardRate\":\"The number of tokens to distribute per second.\"}},\"setRewardWeights(uint256[])\":{\"details\":\"Sets the reward weights of all of the pools.\",\"params\":{\"_rewardWeights\":\"The reward weights of all of the pools.\"}},\"totalRewardWeight()\":{\"details\":\"Gets the total reward weight between all the pools.\",\"returns\":{\"_0\":\"the total reward weight.\"}},\"withdraw(uint256,uint256)\":{\"details\":\"Withdraws staked tokens from a pool.\",\"params\":{\"_poolId\":\"The pool to withdraw staked tokens from.\",\"_withdrawAmount\":\"The number of tokens to withdraw.\"}}},\"stateVariables\":{\"_ctx\":{\"details\":\"The context shared between the pools.\"},\"_pools\":{\"details\":\"A list of all of the pools.\"},\"_stakes\":{\"details\":\"A mapping of all of the user stakes mapped first by pool and then by address.\"},\"governance\":{\"details\":\"The address of the account which currently has administrative capabilities over this contract.\"},\"reward\":{\"details\":\"The token which will be minted as a reward for staking.\"},\"tokenPoolIds\":{\"details\":\"Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool will return an identifier of zero.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(uint256)\":{\"notice\":\"use this function to claim the tokens from a corresponding pool by ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPools.sol\":\"StakingPools\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x4bd6402ca6b3419008c2b482aff54e66836e8cb4eba2680e42ac5884ae6424fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x6c234834003dfb86e2c23d12dfdde7cc01e78013d71b52162cb308b4873562cb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3b30f8a49631420635a8c35daacfcaa338012755f18a76fdd118730256f9a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\ncontract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x7ff0067f2d7df4187eaa1cb4800949b929602c9d9cb20fcaee6922a7613ef2fb\",\"license\":\"MIT\"},\"contracts/StakingPools.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n//import \\\"hardhat/console.sol\\\";\\r\\n\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\n\\r\\nimport {FixedPointMath} from \\\"./libraries/FixedPointMath.sol\\\";\\r\\nimport {IMintableERC20} from \\\"./interfaces/IMintableERC20.sol\\\";\\r\\nimport {Pool} from \\\"./libraries/pools/Pool.sol\\\";\\r\\nimport {Stake} from \\\"./libraries/pools/Stake.sol\\\";\\r\\nimport {StakingPools} from \\\"./StakingPools.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @title StakingPools\\r\\n//    ___    __        __                _               ___                              __         _ \\r\\n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\\\  ____ ___   ___ ___   ___  / /_  ___  (_)\\r\\n//  / __ | / / / __/ / _ \\\\/ -_) /  ' \\\\ / /  \\\\ \\\\ /      / ___/ / __// -_) (_-</ -_) / _ \\\\/ __/ (_-< _   \\r\\n// /_/ |_|/_/  \\\\__/ /_//_/\\\\__/ /_/_/_//_/  /_\\\\_\\\\      /_/    /_/   \\\\__/ /___/\\\\__/ /_//_/\\\\__/ /___/(_)  \\r\\n//  \\r\\n//      _______..___________.     ___       __  ___  __  .__   __.   _______    .______     ______     ______    __           _______.\\r\\n//     /       ||           |    /   \\\\     |  |/  / |  | |  \\\\ |  |  /  _____|   |   _  \\\\   /  __  \\\\   /  __  \\\\  |  |         /       |\\r\\n//    |   (----``---|  |----`   /  ^  \\\\    |  '  /  |  | |   \\\\|  | |  |  __     |  |_)  | |  |  |  | |  |  |  | |  |        |   (----`\\r\\n//     \\\\   \\\\        |  |       /  /_\\\\  \\\\   |    <   |  | |  . `  | |  | |_ |    |   ___/  |  |  |  | |  |  |  | |  |         \\\\   \\\\    \\r\\n// .----)   |       |  |      /  _____  \\\\  |  .  \\\\  |  | |  |\\\\   | |  |__| |    |  |      |  `--'  | |  `--'  | |  `----..----)   |   \\r\\n// |_______/        |__|     /__/     \\\\__\\\\ |__|\\\\__\\\\ |__| |__| \\\\__|  \\\\______|    | _|       \\\\______/   \\\\______/  |_______||_______/                                                                                                                                \\r\\n///\\r\\n/// @dev A contract which allows users to stake to farm tokens.\\r\\n///\\r\\n/// This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this\\r\\n/// repository: https://github.com/sushiswap/sushiswap.\\r\\ncontract StakingPools is ReentrancyGuard {\\r\\n  using FixedPointMath for FixedPointMath.FixedDecimal;\\r\\n  using Pool for Pool.Data;\\r\\n  using Pool for Pool.List;\\r\\n  using SafeERC20 for IERC20;\\r\\n  using SafeMath for uint256;\\r\\n  using Stake for Stake.Data;\\r\\n\\r\\n  event PendingGovernanceUpdated(\\r\\n    address pendingGovernance\\r\\n  );\\r\\n\\r\\n  event GovernanceUpdated(\\r\\n    address governance\\r\\n  );\\r\\n\\r\\n  event RewardRateUpdated(\\r\\n    uint256 rewardRate\\r\\n  );\\r\\n\\r\\n  event PoolRewardWeightUpdated(\\r\\n    uint256 indexed poolId,\\r\\n    uint256 rewardWeight\\r\\n  );\\r\\n\\r\\n  event PoolCreated(\\r\\n    uint256 indexed poolId,\\r\\n    IERC20 indexed token\\r\\n  );\\r\\n\\r\\n  event TokensDeposited(\\r\\n    address indexed user,\\r\\n    uint256 indexed poolId,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event TokensWithdrawn(\\r\\n    address indexed user,\\r\\n    uint256 indexed poolId,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  event TokensClaimed(\\r\\n    address indexed user,\\r\\n    uint256 indexed poolId,\\r\\n    uint256 amount\\r\\n  );\\r\\n\\r\\n  /// @dev The token which will be minted as a reward for staking.\\r\\n  IMintableERC20 public reward;\\r\\n\\r\\n  /// @dev The address of the account which currently has administrative capabilities over this contract.\\r\\n  address public governance;\\r\\n\\r\\n  address public pendingGovernance;\\r\\n\\r\\n  /// @dev Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\\r\\n  /// will return an identifier of zero.\\r\\n  mapping(IERC20 => uint256) public tokenPoolIds;\\r\\n\\r\\n  /// @dev The context shared between the pools.\\r\\n  Pool.Context private _ctx;\\r\\n\\r\\n  /// @dev A list of all of the pools.\\r\\n  Pool.List private _pools;\\r\\n\\r\\n  /// @dev A mapping of all of the user stakes mapped first by pool and then by address.\\r\\n  mapping(address => mapping(uint256 => Stake.Data)) private _stakes;\\r\\n\\r\\n  constructor(\\r\\n    IMintableERC20 _reward,\\r\\n    address _governance\\r\\n  ) public {\\r\\n    require(_governance != address(0), \\\"StakingPools: governance address cannot be 0x0\\\");\\r\\n\\r\\n    reward = _reward;\\r\\n    governance = _governance;\\r\\n  }\\r\\n\\r\\n  /// @dev A modifier which reverts when the caller is not the governance.\\r\\n  modifier onlyGovernance() {\\r\\n    require(msg.sender == governance, \\\"StakingPools: only governance\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev Sets the governance.\\r\\n  ///\\r\\n  /// This function can only called by the current governance.\\r\\n  ///\\r\\n  /// @param _pendingGovernance the new pending governance.\\r\\n  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\\r\\n    require(_pendingGovernance != address(0), \\\"StakingPools: pending governance address cannot be 0x0\\\");\\r\\n    pendingGovernance = _pendingGovernance;\\r\\n\\r\\n    emit PendingGovernanceUpdated(_pendingGovernance);\\r\\n  }\\r\\n\\r\\n  function acceptGovernance() external {\\r\\n    require(msg.sender == pendingGovernance, \\\"StakingPools: only pending governance\\\");\\r\\n\\r\\n    address _pendingGovernance = pendingGovernance;\\r\\n    governance = _pendingGovernance;\\r\\n\\r\\n    emit GovernanceUpdated(_pendingGovernance);\\r\\n  }\\r\\n\\r\\n  /// @dev Sets the distribution reward rate.\\r\\n  ///\\r\\n  /// This will update all of the pools.\\r\\n  ///\\r\\n  /// @param _rewardRate The number of tokens to distribute per second.\\r\\n  function setRewardRate(uint256 _rewardRate) external onlyGovernance {\\r\\n    _updatePools();\\r\\n\\r\\n    _ctx.rewardRate = _rewardRate;\\r\\n\\r\\n    emit RewardRateUpdated(_rewardRate);\\r\\n  }\\r\\n\\r\\n  /// @dev Creates a new pool.\\r\\n  ///\\r\\n  /// The created pool will need to have its reward weight initialized before it begins generating rewards.\\r\\n  ///\\r\\n  /// @param _token The token the pool will accept for staking.\\r\\n  ///\\r\\n  /// @return the identifier for the newly created pool.\\r\\n  function createPool(IERC20 _token) external onlyGovernance returns (uint256) {\\r\\n    require(tokenPoolIds[_token] == 0, \\\"StakingPools: token already has a pool\\\");\\r\\n\\r\\n    uint256 _poolId = _pools.length();\\r\\n\\r\\n    _pools.push(Pool.Data({\\r\\n      token: _token,\\r\\n      totalDeposited: 0,\\r\\n      rewardWeight: 0,\\r\\n      accumulatedRewardWeight: FixedPointMath.FixedDecimal(0),\\r\\n      lastUpdatedBlock: block.number\\r\\n    }));\\r\\n\\r\\n    tokenPoolIds[_token] = _poolId + 1;\\r\\n\\r\\n    emit PoolCreated(_poolId, _token);\\r\\n\\r\\n    return _poolId;\\r\\n  }\\r\\n\\r\\n  /// @dev Sets the reward weights of all of the pools.\\r\\n  ///\\r\\n  /// @param _rewardWeights The reward weights of all of the pools.\\r\\n  function setRewardWeights(uint256[] calldata _rewardWeights) external onlyGovernance {\\r\\n    require(_rewardWeights.length == _pools.length(), \\\"StakingPools: weights length mismatch\\\");\\r\\n\\r\\n    _updatePools();\\r\\n\\r\\n    uint256 _totalRewardWeight = _ctx.totalRewardWeight;\\r\\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\\r\\n      Pool.Data storage _pool = _pools.get(_poolId);\\r\\n\\r\\n      uint256 _currentRewardWeight = _pool.rewardWeight;\\r\\n      if (_currentRewardWeight == _rewardWeights[_poolId]) {\\r\\n        continue;\\r\\n      }\\r\\n\\r\\n      // FIXME\\r\\n      _totalRewardWeight = _totalRewardWeight.sub(_currentRewardWeight).add(_rewardWeights[_poolId]);\\r\\n      _pool.rewardWeight = _rewardWeights[_poolId];\\r\\n\\r\\n      emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\\r\\n    }\\r\\n\\r\\n    _ctx.totalRewardWeight = _totalRewardWeight;\\r\\n  }\\r\\n\\r\\n  /// @dev Stakes tokens into a pool.\\r\\n  ///\\r\\n  /// @param _poolId        the pool to deposit tokens into.\\r\\n  /// @param _depositAmount the amount of tokens to deposit.\\r\\n  function deposit(uint256 _poolId, uint256 _depositAmount) external nonReentrant {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    _pool.update(_ctx);\\r\\n\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n    _stake.update(_pool, _ctx);\\r\\n\\r\\n    _deposit(_poolId, _depositAmount);\\r\\n  }\\r\\n\\r\\n  /// @dev Withdraws staked tokens from a pool.\\r\\n  ///\\r\\n  /// @param _poolId          The pool to withdraw staked tokens from.\\r\\n  /// @param _withdrawAmount  The number of tokens to withdraw.\\r\\n  function withdraw(uint256 _poolId, uint256 _withdrawAmount) external nonReentrant {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    _pool.update(_ctx);\\r\\n\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n    _stake.update(_pool, _ctx);\\r\\n    \\r\\n    _claim(_poolId);\\r\\n    _withdraw(_poolId, _withdrawAmount);\\r\\n  }\\r\\n\\r\\n  /// @dev Claims all rewarded tokens from a pool.\\r\\n  ///\\r\\n  /// @param _poolId The pool to claim rewards from.\\r\\n  ///\\r\\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\\r\\n  function claim(uint256 _poolId) external nonReentrant {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    _pool.update(_ctx);\\r\\n\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n    _stake.update(_pool, _ctx);\\r\\n\\r\\n    _claim(_poolId);\\r\\n  }\\r\\n\\r\\n  /// @dev Claims all rewards from a pool and then withdraws all staked tokens.\\r\\n  ///\\r\\n  /// @param _poolId the pool to exit from.\\r\\n  function exit(uint256 _poolId) external nonReentrant {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    _pool.update(_ctx);\\r\\n\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n    _stake.update(_pool, _ctx);\\r\\n\\r\\n    _claim(_poolId);\\r\\n    _withdraw(_poolId, _stake.totalDeposited);\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the rate at which tokens are minted to stakers for all pools.\\r\\n  ///\\r\\n  /// @return the reward rate.\\r\\n  function rewardRate() external view returns (uint256) {\\r\\n    return _ctx.rewardRate;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the total reward weight between all the pools.\\r\\n  ///\\r\\n  /// @return the total reward weight.\\r\\n  function totalRewardWeight() external view returns (uint256) {\\r\\n    return _ctx.totalRewardWeight;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the number of pools that exist.\\r\\n  ///\\r\\n  /// @return the pool count.\\r\\n  function poolCount() external view returns (uint256) {\\r\\n    return _pools.length();\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the token a pool accepts.\\r\\n  ///\\r\\n  /// @param _poolId the identifier of the pool.\\r\\n  ///\\r\\n  /// @return the token.\\r\\n  function getPoolToken(uint256 _poolId) external view returns (IERC20) {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    return _pool.token;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the total amount of funds staked in a pool.\\r\\n  ///\\r\\n  /// @param _poolId the identifier of the pool.\\r\\n  ///\\r\\n  /// @return the total amount of staked or deposited tokens.\\r\\n  function getPoolTotalDeposited(uint256 _poolId) external view returns (uint256) {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    return _pool.totalDeposited;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\\r\\n  ///\\r\\n  /// @param _poolId the identifier of the pool.\\r\\n  ///\\r\\n  /// @return the pool reward weight.\\r\\n  function getPoolRewardWeight(uint256 _poolId) external view returns (uint256) {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    return _pool.rewardWeight;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the amount of tokens per block being distributed to stakers for a pool.\\r\\n  ///\\r\\n  /// @param _poolId the identifier of the pool.\\r\\n  ///\\r\\n  /// @return the pool reward rate.\\r\\n  function getPoolRewardRate(uint256 _poolId) external view returns (uint256) {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    return _pool.getRewardRate(_ctx);\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the number of tokens a user has staked into a pool.\\r\\n  ///\\r\\n  /// @param _account The account to query.\\r\\n  /// @param _poolId  the identifier of the pool.\\r\\n  ///\\r\\n  /// @return the amount of deposited tokens.\\r\\n  function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256) {\\r\\n    Stake.Data storage _stake = _stakes[_account][_poolId];\\r\\n    return _stake.totalDeposited;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\\r\\n  ///\\r\\n  /// @param _account The account to get the unclaimed balance of.\\r\\n  /// @param _poolId  The pool to check for unclaimed rewards.\\r\\n  ///\\r\\n  /// @return the amount of unclaimed reward tokens a user has in a pool.\\r\\n  function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256) {\\r\\n    Stake.Data storage _stake = _stakes[_account][_poolId];\\r\\n    return _stake.getUpdatedTotalUnclaimed(_pools.get(_poolId), _ctx);\\r\\n  }\\r\\n\\r\\n  /// @dev Updates all of the pools.\\r\\n  function _updatePools() internal {\\r\\n    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\\r\\n      Pool.Data storage _pool = _pools.get(_poolId);\\r\\n      _pool.update(_ctx);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev Stakes tokens into a pool.\\r\\n  ///\\r\\n  /// The pool and stake MUST be updated before calling this function.\\r\\n  ///\\r\\n  /// @param _poolId        the pool to deposit tokens into.\\r\\n  /// @param _depositAmount the amount of tokens to deposit.\\r\\n  function _deposit(uint256 _poolId, uint256 _depositAmount) internal {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n\\r\\n    _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);\\r\\n    _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);\\r\\n\\r\\n    _pool.token.safeTransferFrom(msg.sender, address(this), _depositAmount);\\r\\n\\r\\n    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\\r\\n  }\\r\\n\\r\\n  /// @dev Withdraws staked tokens from a pool.\\r\\n  ///\\r\\n  /// The pool and stake MUST be updated before calling this function.\\r\\n  ///\\r\\n  /// @param _poolId          The pool to withdraw staked tokens from.\\r\\n  /// @param _withdrawAmount  The number of tokens to withdraw.\\r\\n  function _withdraw(uint256 _poolId, uint256 _withdrawAmount) internal {\\r\\n    Pool.Data storage _pool = _pools.get(_poolId);\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n\\r\\n    _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);\\r\\n    _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);\\r\\n\\r\\n    _pool.token.safeTransfer(msg.sender, _withdrawAmount);\\r\\n\\r\\n    emit TokensWithdrawn(msg.sender, _poolId, _withdrawAmount);\\r\\n  }\\r\\n\\r\\n  /// @dev Claims all rewarded tokens from a pool.\\r\\n  ///\\r\\n  /// The pool and stake MUST be updated before calling this function.\\r\\n  ///\\r\\n  /// @param _poolId The pool to claim rewards from.\\r\\n  ///\\r\\n  /// @notice use this function to claim the tokens from a corresponding pool by ID.\\r\\n  function _claim(uint256 _poolId) internal {\\r\\n    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\\r\\n\\r\\n    uint256 _claimAmount = _stake.totalUnclaimed;\\r\\n    _stake.totalUnclaimed = 0;\\r\\n\\r\\n    reward.mint(msg.sender, _claimAmount);\\r\\n\\r\\n    emit TokensClaimed(msg.sender, _poolId, _claimAmount);\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x334165285dff6e0edb8dae308593f7d7cb8d04bd9e69c44692afe963702c9771\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IDetailedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IDetailedERC20 is IERC20 {\\r\\n  function name() external returns (string memory);\\r\\n  function symbol() external returns (string memory);\\r\\n  function decimals() external returns (uint8);\\r\\n}\",\"keccak256\":\"0x114213381be2b2b8d374442a3ad1114c37271b65a4e4cb422ed4dbe837c40028\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IMintableERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\n\\r\\nimport {IDetailedERC20} from \\\"./IDetailedERC20.sol\\\";\\r\\n\\r\\ninterface IMintableERC20 is IDetailedERC20{\\r\\n  function mint(address _recipient, uint256 _amount) external;\\r\\n  function burnFrom(address account, uint256 amount) external;\\r\\n  function lowerHasMinted(uint256 amount)external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1d314c9181e1ad6f5071f09dde2b2857b390f0116937235af51fd981028c6e42\",\"license\":\"GPL-3.0\"},\"contracts/libraries/FixedPointMath.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.6.12;\\r\\n\\r\\nlibrary FixedPointMath {\\r\\n  uint256 public constant DECIMALS = 18;\\r\\n  uint256 public constant SCALAR = 10**DECIMALS;\\r\\n\\r\\n  struct FixedDecimal {\\r\\n    uint256 x;\\r\\n  }\\r\\n\\r\\n  function fromU256(uint256 value) internal pure returns (FixedDecimal memory) {\\r\\n    uint256 x;\\r\\n    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\\r\\n    return FixedDecimal(x);\\r\\n  }\\r\\n\\r\\n  function maximumValue() internal pure returns (FixedDecimal memory) {\\r\\n    return FixedDecimal(uint256(-1));\\r\\n  }\\r\\n\\r\\n  function add(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\\r\\n    uint256 x;\\r\\n    require((x = self.x + value.x) >= self.x);\\r\\n    return FixedDecimal(x);\\r\\n  }\\r\\n\\r\\n  function add(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\r\\n    return add(self, fromU256(value));\\r\\n  }\\r\\n\\r\\n  function sub(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (FixedDecimal memory) {\\r\\n    uint256 x;\\r\\n    require((x = self.x - value.x) <= self.x);\\r\\n    return FixedDecimal(x);\\r\\n  }\\r\\n\\r\\n  function sub(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\r\\n    return sub(self, fromU256(value));\\r\\n  }\\r\\n\\r\\n  function mul(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\r\\n    uint256 x;\\r\\n    require(value == 0 || (x = self.x * value) / value == self.x);\\r\\n    return FixedDecimal(x);\\r\\n  }\\r\\n\\r\\n  function div(FixedDecimal memory self, uint256 value) internal pure returns (FixedDecimal memory) {\\r\\n    require(value != 0);\\r\\n    return FixedDecimal(self.x / value);\\r\\n  }\\r\\n\\r\\n  function cmp(FixedDecimal memory self, FixedDecimal memory value) internal pure returns (int256) {\\r\\n    if (self.x < value.x) {\\r\\n      return -1;\\r\\n    }\\r\\n\\r\\n    if (self.x > value.x) {\\r\\n      return 1;\\r\\n    }\\r\\n\\r\\n    return 0;\\r\\n  }\\r\\n\\r\\n  function decode(FixedDecimal memory self) internal pure returns (uint256) {\\r\\n    return self.x / SCALAR;\\r\\n  }\\r\\n}\",\"keccak256\":\"0xe5cc113dd59eae93d8f722d6b30581b8c89b73fb5359cd15d539f60251141051\",\"license\":\"Unlicense\"},\"contracts/libraries/pools/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport {FixedPointMath} from \\\"../FixedPointMath.sol\\\";\\r\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n\\r\\n/// @title Pool\\r\\n///\\r\\n/// @dev A library which provides the Pool data struct and associated functions.\\r\\nlibrary Pool {\\r\\n  using FixedPointMath for FixedPointMath.FixedDecimal;\\r\\n  using Pool for Pool.Data;\\r\\n  using Pool for Pool.List;\\r\\n  using SafeMath for uint256;\\r\\n\\r\\n  struct Context {\\r\\n    uint256 rewardRate;\\r\\n    uint256 totalRewardWeight;\\r\\n  }\\r\\n\\r\\n  struct Data {\\r\\n    IERC20 token;\\r\\n    uint256 totalDeposited;\\r\\n    uint256 rewardWeight;\\r\\n    FixedPointMath.FixedDecimal accumulatedRewardWeight;\\r\\n    uint256 lastUpdatedBlock;\\r\\n  }\\r\\n\\r\\n  struct List {\\r\\n    Data[] elements;\\r\\n  }\\r\\n\\r\\n  /// @dev Updates the pool.\\r\\n  ///\\r\\n  /// @param _ctx the pool context.\\r\\n  function update(Data storage _data, Context storage _ctx) internal {\\r\\n    _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\\r\\n    _data.lastUpdatedBlock = block.number;\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the rate at which the pool will distribute rewards to stakers.\\r\\n  ///\\r\\n  /// @param _ctx the pool context.\\r\\n  ///\\r\\n  /// @return the reward rate of the pool in tokens per block.\\r\\n  function getRewardRate(Data storage _data, Context storage _ctx)\\r\\n    internal view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    // console.log(\\\"get reward rate\\\");\\r\\n    // console.log(uint(_data.rewardWeight));\\r\\n    // console.log(uint(_ctx.totalRewardWeight));\\r\\n    // console.log(uint(_ctx.rewardRate));\\r\\n    return _ctx.rewardRate.mul(_data.rewardWeight).div(_ctx.totalRewardWeight);\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the accumulated reward weight of a pool.\\r\\n  ///\\r\\n  /// @param _ctx the pool context.\\r\\n  ///\\r\\n  /// @return the accumulated reward weight.\\r\\n  function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\\r\\n    internal view\\r\\n    returns (FixedPointMath.FixedDecimal memory)\\r\\n  {\\r\\n    if (_data.totalDeposited == 0) {\\r\\n      return _data.accumulatedRewardWeight;\\r\\n    }\\r\\n\\r\\n    uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\\r\\n    if (_elapsedTime == 0) {\\r\\n      return _data.accumulatedRewardWeight;\\r\\n    }\\r\\n\\r\\n    uint256 _rewardRate = _data.getRewardRate(_ctx);\\r\\n    uint256 _distributeAmount = _rewardRate.mul(_elapsedTime);\\r\\n\\r\\n    if (_distributeAmount == 0) {\\r\\n      return _data.accumulatedRewardWeight;\\r\\n    }\\r\\n\\r\\n    FixedPointMath.FixedDecimal memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDeposited);\\r\\n    return _data.accumulatedRewardWeight.add(_rewardWeight);\\r\\n  }\\r\\n\\r\\n  /// @dev Adds an element to the list.\\r\\n  ///\\r\\n  /// @param _element the element to add.\\r\\n  function push(List storage _self, Data memory _element) internal {\\r\\n    _self.elements.push(_element);\\r\\n  }\\r\\n\\r\\n  /// @dev Gets an element from the list.\\r\\n  ///\\r\\n  /// @param _index the index in the list.\\r\\n  ///\\r\\n  /// @return the element at the specified index.\\r\\n  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\\r\\n    return _self.elements[_index];\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the last element in the list.\\r\\n  ///\\r\\n  /// This function will revert if there are no elements in the list.\\r\\n  ///ck\\r\\n  /// @return the last element in the list.\\r\\n  function last(List storage _self) internal view returns (Data storage) {\\r\\n    return _self.elements[_self.lastIndex()];\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the index of the last element in the list.\\r\\n  ///\\r\\n  /// This function will revert if there are no elements in the list.\\r\\n  ///\\r\\n  /// @return the index of the last element.\\r\\n  function lastIndex(List storage _self) internal view returns (uint256) {\\r\\n    uint256 _length = _self.length();\\r\\n    return _length.sub(1, \\\"Pool.List: list is empty\\\");\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the number of elements in the list.\\r\\n  ///\\r\\n  /// @return the number of elements.\\r\\n  function length(List storage _self) internal view returns (uint256) {\\r\\n    return _self.elements.length;\\r\\n  }\\r\\n}\",\"keccak256\":\"0x22f8cab8c5e1bd936d7838bc91f60e88316bc6084f7b40f007e00b6418f3f78b\",\"license\":\"GPL-3.0\"},\"contracts/libraries/pools/Stake.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.6.12;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport {Math} from \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\r\\nimport {SafeMath} from \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\n\\r\\nimport {FixedPointMath} from \\\"../FixedPointMath.sol\\\";\\r\\nimport {IDetailedERC20} from \\\"../../interfaces/IDetailedERC20.sol\\\";\\r\\nimport {Pool} from \\\"./Pool.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\n/// @title Stake\\r\\n///\\r\\n/// @dev A library which provides the Stake data struct and associated functions.\\r\\nlibrary Stake {\\r\\n  using FixedPointMath for FixedPointMath.FixedDecimal;\\r\\n  using Pool for Pool.Data;\\r\\n  using SafeMath for uint256;\\r\\n  using Stake for Stake.Data;\\r\\n\\r\\n  struct Data {\\r\\n    uint256 totalDeposited;\\r\\n    uint256 totalUnclaimed;\\r\\n    FixedPointMath.FixedDecimal lastAccumulatedWeight;\\r\\n  }\\r\\n\\r\\n  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\\r\\n    _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\\r\\n    _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\\r\\n  }\\r\\n\\r\\n  function getUpdatedTotalUnclaimed(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\\r\\n    internal view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    FixedPointMath.FixedDecimal memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\\r\\n    FixedPointMath.FixedDecimal memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\\r\\n\\r\\n    if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\\r\\n      return _self.totalUnclaimed;\\r\\n    }\\r\\n\\r\\n    uint256 _distributedAmount = _currentAccumulatedWeight\\r\\n      .sub(_lastAccumulatedWeight)\\r\\n      .mul(_self.totalDeposited)\\r\\n      .decode();\\r\\n\\r\\n    return _self.totalUnclaimed.add(_distributedAmount);\\r\\n  }\\r\\n}\",\"keccak256\":\"0x46412e7399ee5a4f13c940dd913a7b4fe90941cc603706af7313ca057f40b7fd\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.8.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logByte(byte p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(byte)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xd3f9eb69241af8de5174a6cfa3da3cbc94e351dee495002d8675b665865ba417\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e3638038062001e3683398101604081905262000034916200009d565b60016000556001600160a01b0381166200006b5760405162461bcd60e51b81526004016200006290620000db565b60405180910390fd5b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562000142565b60008060408385031215620000b0578182fd5b8251620000bd8162000129565b6020840151909250620000d08162000129565b809150509250929050565b6020808252602e908201527f5374616b696e67506f6f6c733a20676f7665726e616e6365206164647265737360408201526d02063616e6e6f74206265203078360941b606082015260800190565b6001600160a01b03811681146200013f57600080fd5b50565b611ce480620001526000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80637f8661a1116100d8578063acfc5b6d1161008c578063eda7c59911610066578063eda7c599146102de578063f39c38a0146102f1578063f525cb68146102f957610182565b8063acfc5b6d146102b0578063d64b84b5146102c3578063e2bbb158146102cb57610182565b8063895a9e09116100bd578063895a9e09146102775780639049f9d21461028a5780639e447fc61461029d57610182565b80637f8661a1146102515780637fd115d71461026457610182565b806339664a311161013a5780635ac2f301116101145780635ac2f301146102235780636e5105c2146102365780637b0a47ee1461024957610182565b806339664a31146101e8578063441a3e70146102085780635aa6e6751461021b57610182565b8063228cb7331161016b578063228cb733146101af578063238efcbc146101cd578063379607f5146101d557610182565b80630361ca5a146101875780630abb60351461019c575b600080fd5b61019a6101953660046117a0565b610301565b005b61019a6101aa366004611759565b61049a565b6101b76105b3565b6040516101c49190611884565b60405180910390f35b61019a6105cf565b61019a6101e336600461182f565b610696565b6101fb6101f6366004611759565b61072b565b6040516101c49190611c57565b61019a610216366004611847565b61073d565b6101b76107dd565b6101fb61023136600461182f565b6107f9565b6101fb61024436600461182f565b610812565b6101fb61082b565b61019a61025f36600461182f565b610831565b6101fb610272366004611775565b6108ca565b6101fb61028536600461182f565b61091b565b6101fb610298366004611759565b61093d565b61019a6102ab36600461182f565b610ab5565b6101fb6102be366004611775565b610b43565b6101fb610b78565b61019a6102d9366004611847565b610b7e565b6101b76102ec36600461182f565b610c0a565b6101b7610c36565b6101fb610c52565b60025473ffffffffffffffffffffffffffffffffffffffff16331461035b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b60405180910390fd5b6103656007610c63565b811461039d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611bc3565b6103a5610c67565b60065460005b6103b56007610c63565b8110156104925760006103c9600783610ca1565b60028101549091508585848181106103dd57fe5b905060200201358114156103f257505061048a565b61042186868581811061040157fe5b9050602002013561041b8387610cc890919063ffffffff16565b90610d0a565b935085858481811061042f57fe5b6020029190910135600284015550827f4ca01fb9384991e6b301fe0ac5263aa1e34e2ea1a96dc91393e5bf3e3c34c66487878381811061046b57fe5b9050602002013560405161047f9190611c57565b60405180910390a250505b6001016103ab565b506006555050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b73ffffffffffffffffffffffffffffffffffffffff8116610538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103529061194d565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e7839906105a8908390611884565b60405180910390a150565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff163314610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611aac565b600354600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab906105a8908390611884565b600260005414156106d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b600260009081556106e5600783610ca1565b90506106f2816005610d49565b336000908152600860209081526040808320858452909152902061071881836005610d63565b61072183610d8b565b5050600160005550565b60046020526000908152604090205481565b6002600054141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b6002600090815561078c600784610ca1565b9050610799816005610d49565b33600090815260086020908152604080832086845290915290206107bf81836005610d63565b6107c884610d8b565b6107d28484610e8c565b505060016000555050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600080610807600784610ca1565b600201549392505050565b600080610820600784610ca1565b600101549392505050565b60055490565b6002600054141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b60026000908155610880600783610ca1565b905061088d816005610d49565b33600090815260086020908152604080832085845290915290206108b381836005610d63565b6108bc83610d8b565b610721838260000154610e8c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602090815260408083208484529091528120610911610908600785610ca1565b82906005610f51565b9150505b92915050565b600080610929600784610ca1565b9050610936816005610fdc565b9392505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff163314610991576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054156109ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611b09565b60006109fa6007610c63565b9050610a5d6040518060a001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160405180602001604052806000815250815260200143815250600761100790919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600460205260408082206001850190555183917f65fc0eb45954044fb55e1b01344d5d72fbfdf88e732d955f73bb7fb2bcc131e991a392915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b610b0e610c67565b60058190556040517f41d466ebd06fb97e7786086ac8b69b7eb7da798592036251291d34e9791cde01906105a8908390611c57565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600860209081526040808320938352929052205490565b60065490565b60026000541415610bbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b60026000908155610bcd600784610ca1565b9050610bda816005610d49565b3360009081526008602090815260408083208684529091529020610c0081836005610d63565b6107d28484611091565b600080610c18600784610ca1565b5473ffffffffffffffffffffffffffffffffffffffff169392505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c5e6007610c63565b905090565b5490565b60005b610c746007610c63565b811015610c9e576000610c88600783610ca1565b9050610c95816005610d49565b50600101610c6a565b50565b6000826000018281548110610cb257fe5b9060005260206000209060050201905092915050565b600061093683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611149565b600082820183811015610936576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119aa565b610d53828261118f565b5160038301555043600490910155565b610d6e838383610f51565b6001840155610d7d828261118f565b516002909301929092555050565b336000818152600860209081526040808320858452909152808220600180820180549490555491517f40c10f19000000000000000000000000000000000000000000000000000000008152909373ffffffffffffffffffffffffffffffffffffffff909216916340c10f1991610e06919085906004016118a5565b600060405180830381600087803b158015610e2057600080fd5b505af1158015610e34573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b83604051610e7f9190611c57565b60405180910390a3505050565b6000610e99600784610ca1565b3360009081526008602090815260408083208784529091529020600182015491925090610ec69084610cc8565b60018301558054610ed79084610cc8565b81558154610efc9073ffffffffffffffffffffffffffffffffffffffff16338561126d565b833373ffffffffffffffffffffffffffffffffffffffff167fffe903c0abe6b2dbb2f3474ef43d7a3c1fca49e5a774453423ca8e1952aabffa85604051610f439190611c57565b60405180910390a350505050565b6000610f5b611746565b610f65848461118f565b9050610f6f611746565b50604080516020810190915260028601548152610f8c8282611313565b610f9d575050506001830154610936565b8554600090610fbf90610fba90610fb48686611362565b90611392565b6113c0565b6001880154909150610fd19082610d0a565b979650505050505050565b60006109368260010154611001856002015485600001546113cf90919063ffffffff16565b90611423565b8154600180820184556000938452602093849020835160059093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092178255928201519281019290925560408101516002830155606081015151600383015560800151600490910155565b600061109e600784610ca1565b33600090815260086020908152604080832087845290915290206001820154919250906110cb9084610d0a565b600183015580546110dc9084610d0a565b815581546111029073ffffffffffffffffffffffffffffffffffffffff16333086611465565b833373ffffffffffffffffffffffffffffffffffffffff167ffdfdcf596161b0e81e3161597d46888dcc88bd83b22dcfb341c76377ca3bbc9e85604051610f439190611c57565b60008184841115611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035291906118fc565b505050900390565b611197611746565b60018301546111b85750604080516020810190915260038301548152610915565b60006111d1846004015443610cc890919063ffffffff16565b9050806111f1575050604080516020810190915260038301548152610915565b60006111fd8585610fdc565b9050600061120b82846113cf565b90508061122f57505060408051602081019091526003850154815291506109159050565b611237611746565b61124e87600101546112488461148c565b906114ce565b604080516020810190915260038901548152909150610fd19082611502565b61130e8363a9059cbb60e01b848460405160240161128c9291906118a5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261151d565b505050565b80518251600091111561134757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610915565b81518351111561135957506001610915565b50600092915050565b61136a611746565b8251825181039081111561137d57600080fd5b60408051602081019091529081529392505050565b61139a611746565b60008215806113b75750508251828102908382816113b457fe5b04145b61137d57600080fd5b51670de0b6b3a7640000900490565b6000826113de57506000610915565b828202828482816113eb57fe5b0414610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611a18565b600061093683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115d3565b611486846323b872dd60e01b85858560405160240161128c939291906118cb565b50505050565b611494611746565b60008215806114b1575050670de0b6b3a764000082810290810483145b6114ba57600080fd5b604080516020810190915290815292915050565b6114d6611746565b816114e057600080fd5b6040518060200160405280838560000151816114f857fe5b0490529392505050565b61150a611746565b8251825181019081101561137d57600080fd5b606061157f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116249092919063ffffffff16565b80519091501561130e578080602001905181019061159d919061180f565b61130e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611b66565b6000818361160e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035291906118fc565b50600083858161161a57fe5b0495945050505050565b6060611633848460008561163b565b949350505050565b606061164685611740565b61167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611a75565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516116a69190611868565b60006040518083038185875af1925050503d80600081146116e3576040519150601f19603f3d011682016040523d82523d6000602084013e6116e8565b606091505b509150915081156116fc5791506116339050565b80511561170c5780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035291906118fc565b3b151590565b6040518060200160405280600081525090565b60006020828403121561176a578081fd5b813561093681611c8c565b60008060408385031215611787578081fd5b823561179281611c8c565b946020939093013593505050565b600080602083850312156117b2578182fd5b823567ffffffffffffffff808211156117c9578384fd5b818501915085601f8301126117dc578384fd5b8135818111156117ea578485fd5b86602080830285010111156117fd578485fd5b60209290920196919550909350505050565b600060208284031215611820578081fd5b81518015158114610936578182fd5b600060208284031215611840578081fd5b5035919050565b60008060408385031215611859578182fd5b50508035926020909101359150565b6000825161187a818460208701611c60565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600060208252825180602084015261191b816040850160208701611c60565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526036908201527f5374616b696e67506f6f6c733a2070656e64696e6720676f7665726e616e636560408201527f20616464726573732063616e6e6f742062652030783000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f5374616b696e67506f6f6c733a206f6e6c7920676f7665726e616e6365000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526025908201527f5374616b696e67506f6f6c733a206f6e6c792070656e64696e6720676f76657260408201527f6e616e6365000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f5374616b696e67506f6f6c733a20746f6b656e20616c7265616479206861732060408201527f6120706f6f6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f5374616b696e67506f6f6c733a2077656967687473206c656e677468206d697360408201527f6d61746368000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b60005b83811015611c7b578181015183820152602001611c63565b838111156114865750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610c9e57600080fdfea2646970667358221220de8fd1aff9f52d772780568178fabf6b4f5b11456f98f9e5aa464094d8fa874f64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80637f8661a1116100d8578063acfc5b6d1161008c578063eda7c59911610066578063eda7c599146102de578063f39c38a0146102f1578063f525cb68146102f957610182565b8063acfc5b6d146102b0578063d64b84b5146102c3578063e2bbb158146102cb57610182565b8063895a9e09116100bd578063895a9e09146102775780639049f9d21461028a5780639e447fc61461029d57610182565b80637f8661a1146102515780637fd115d71461026457610182565b806339664a311161013a5780635ac2f301116101145780635ac2f301146102235780636e5105c2146102365780637b0a47ee1461024957610182565b806339664a31146101e8578063441a3e70146102085780635aa6e6751461021b57610182565b8063228cb7331161016b578063228cb733146101af578063238efcbc146101cd578063379607f5146101d557610182565b80630361ca5a146101875780630abb60351461019c575b600080fd5b61019a6101953660046117a0565b610301565b005b61019a6101aa366004611759565b61049a565b6101b76105b3565b6040516101c49190611884565b60405180910390f35b61019a6105cf565b61019a6101e336600461182f565b610696565b6101fb6101f6366004611759565b61072b565b6040516101c49190611c57565b61019a610216366004611847565b61073d565b6101b76107dd565b6101fb61023136600461182f565b6107f9565b6101fb61024436600461182f565b610812565b6101fb61082b565b61019a61025f36600461182f565b610831565b6101fb610272366004611775565b6108ca565b6101fb61028536600461182f565b61091b565b6101fb610298366004611759565b61093d565b61019a6102ab36600461182f565b610ab5565b6101fb6102be366004611775565b610b43565b6101fb610b78565b61019a6102d9366004611847565b610b7e565b6101b76102ec36600461182f565b610c0a565b6101b7610c36565b6101fb610c52565b60025473ffffffffffffffffffffffffffffffffffffffff16331461035b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b60405180910390fd5b6103656007610c63565b811461039d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611bc3565b6103a5610c67565b60065460005b6103b56007610c63565b8110156104925760006103c9600783610ca1565b60028101549091508585848181106103dd57fe5b905060200201358114156103f257505061048a565b61042186868581811061040157fe5b9050602002013561041b8387610cc890919063ffffffff16565b90610d0a565b935085858481811061042f57fe5b6020029190910135600284015550827f4ca01fb9384991e6b301fe0ac5263aa1e34e2ea1a96dc91393e5bf3e3c34c66487878381811061046b57fe5b9050602002013560405161047f9190611c57565b60405180910390a250505b6001016103ab565b506006555050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146104eb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b73ffffffffffffffffffffffffffffffffffffffff8116610538576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103529061194d565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556040517fc9e2377236eab4280090ce8f2317332649736d92f00dcf20a8dd6684ec5e7839906105a8908390611884565b60405180910390a150565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035473ffffffffffffffffffffffffffffffffffffffff163314610620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611aac565b600354600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691821790556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab906105a8908390611884565b600260005414156106d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b600260009081556106e5600783610ca1565b90506106f2816005610d49565b336000908152600860209081526040808320858452909152902061071881836005610d63565b61072183610d8b565b5050600160005550565b60046020526000908152604090205481565b6002600054141561077a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b6002600090815561078c600784610ca1565b9050610799816005610d49565b33600090815260086020908152604080832086845290915290206107bf81836005610d63565b6107c884610d8b565b6107d28484610e8c565b505060016000555050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b600080610807600784610ca1565b600201549392505050565b600080610820600784610ca1565b600101549392505050565b60055490565b6002600054141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b60026000908155610880600783610ca1565b905061088d816005610d49565b33600090815260086020908152604080832085845290915290206108b381836005610d63565b6108bc83610d8b565b610721838260000154610e8c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526008602090815260408083208484529091528120610911610908600785610ca1565b82906005610f51565b9150505b92915050565b600080610929600784610ca1565b9050610936816005610fdc565b9392505050565b60025460009073ffffffffffffffffffffffffffffffffffffffff163314610991576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902054156109ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611b09565b60006109fa6007610c63565b9050610a5d6040518060a001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160405180602001604052806000815250815260200143815250600761100790919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600460205260408082206001850190555183917f65fc0eb45954044fb55e1b01344d5d72fbfdf88e732d955f73bb7fb2bcc131e991a392915050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610b06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119e1565b610b0e610c67565b60058190556040517f41d466ebd06fb97e7786086ac8b69b7eb7da798592036251291d34e9791cde01906105a8908390611c57565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600860209081526040808320938352929052205490565b60065490565b60026000541415610bbb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611c20565b60026000908155610bcd600784610ca1565b9050610bda816005610d49565b3360009081526008602090815260408083208684529091529020610c0081836005610d63565b6107d28484611091565b600080610c18600784610ca1565b5473ffffffffffffffffffffffffffffffffffffffff169392505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c5e6007610c63565b905090565b5490565b60005b610c746007610c63565b811015610c9e576000610c88600783610ca1565b9050610c95816005610d49565b50600101610c6a565b50565b6000826000018281548110610cb257fe5b9060005260206000209060050201905092915050565b600061093683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611149565b600082820183811015610936576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610352906119aa565b610d53828261118f565b5160038301555043600490910155565b610d6e838383610f51565b6001840155610d7d828261118f565b516002909301929092555050565b336000818152600860209081526040808320858452909152808220600180820180549490555491517f40c10f19000000000000000000000000000000000000000000000000000000008152909373ffffffffffffffffffffffffffffffffffffffff909216916340c10f1991610e06919085906004016118a5565b600060405180830381600087803b158015610e2057600080fd5b505af1158015610e34573d6000803e3d6000fd5b50505050823373ffffffffffffffffffffffffffffffffffffffff167f9923b4306c6c030f2bdfbf156517d5983b87e15b96176da122cd4f2effa4ba7b83604051610e7f9190611c57565b60405180910390a3505050565b6000610e99600784610ca1565b3360009081526008602090815260408083208784529091529020600182015491925090610ec69084610cc8565b60018301558054610ed79084610cc8565b81558154610efc9073ffffffffffffffffffffffffffffffffffffffff16338561126d565b833373ffffffffffffffffffffffffffffffffffffffff167fffe903c0abe6b2dbb2f3474ef43d7a3c1fca49e5a774453423ca8e1952aabffa85604051610f439190611c57565b60405180910390a350505050565b6000610f5b611746565b610f65848461118f565b9050610f6f611746565b50604080516020810190915260028601548152610f8c8282611313565b610f9d575050506001830154610936565b8554600090610fbf90610fba90610fb48686611362565b90611392565b6113c0565b6001880154909150610fd19082610d0a565b979650505050505050565b60006109368260010154611001856002015485600001546113cf90919063ffffffff16565b90611423565b8154600180820184556000938452602093849020835160059093020180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909316929092178255928201519281019290925560408101516002830155606081015151600383015560800151600490910155565b600061109e600784610ca1565b33600090815260086020908152604080832087845290915290206001820154919250906110cb9084610d0a565b600183015580546110dc9084610d0a565b815581546111029073ffffffffffffffffffffffffffffffffffffffff16333086611465565b833373ffffffffffffffffffffffffffffffffffffffff167ffdfdcf596161b0e81e3161597d46888dcc88bd83b22dcfb341c76377ca3bbc9e85604051610f439190611c57565b60008184841115611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035291906118fc565b505050900390565b611197611746565b60018301546111b85750604080516020810190915260038301548152610915565b60006111d1846004015443610cc890919063ffffffff16565b9050806111f1575050604080516020810190915260038301548152610915565b60006111fd8585610fdc565b9050600061120b82846113cf565b90508061122f57505060408051602081019091526003850154815291506109159050565b611237611746565b61124e87600101546112488461148c565b906114ce565b604080516020810190915260038901548152909150610fd19082611502565b61130e8363a9059cbb60e01b848460405160240161128c9291906118a5565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261151d565b505050565b80518251600091111561134757507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610915565b81518351111561135957506001610915565b50600092915050565b61136a611746565b8251825181039081111561137d57600080fd5b60408051602081019091529081529392505050565b61139a611746565b60008215806113b75750508251828102908382816113b457fe5b04145b61137d57600080fd5b51670de0b6b3a7640000900490565b6000826113de57506000610915565b828202828482816113eb57fe5b0414610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611a18565b600061093683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506115d3565b611486846323b872dd60e01b85858560405160240161128c939291906118cb565b50505050565b611494611746565b60008215806114b1575050670de0b6b3a764000082810290810483145b6114ba57600080fd5b604080516020810190915290815292915050565b6114d6611746565b816114e057600080fd5b6040518060200160405280838560000151816114f857fe5b0490529392505050565b61150a611746565b8251825181019081101561137d57600080fd5b606061157f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166116249092919063ffffffff16565b80519091501561130e578080602001905181019061159d919061180f565b61130e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611b66565b6000818361160e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035291906118fc565b50600083858161161a57fe5b0495945050505050565b6060611633848460008561163b565b949350505050565b606061164685611740565b61167c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035290611a75565b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516116a69190611868565b60006040518083038185875af1925050503d80600081146116e3576040519150601f19603f3d011682016040523d82523d6000602084013e6116e8565b606091505b509150915081156116fc5791506116339050565b80511561170c5780518082602001fd5b836040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035291906118fc565b3b151590565b6040518060200160405280600081525090565b60006020828403121561176a578081fd5b813561093681611c8c565b60008060408385031215611787578081fd5b823561179281611c8c565b946020939093013593505050565b600080602083850312156117b2578182fd5b823567ffffffffffffffff808211156117c9578384fd5b818501915085601f8301126117dc578384fd5b8135818111156117ea578485fd5b86602080830285010111156117fd578485fd5b60209290920196919550909350505050565b600060208284031215611820578081fd5b81518015158114610936578182fd5b600060208284031215611840578081fd5b5035919050565b60008060408385031215611859578182fd5b50508035926020909101359150565b6000825161187a818460208701611c60565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600060208252825180602084015261191b816040850160208701611c60565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60208082526036908201527f5374616b696e67506f6f6c733a2070656e64696e6720676f7665726e616e636560408201527f20616464726573732063616e6e6f742062652030783000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601d908201527f5374616b696e67506f6f6c733a206f6e6c7920676f7665726e616e6365000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526025908201527f5374616b696e67506f6f6c733a206f6e6c792070656e64696e6720676f76657260408201527f6e616e6365000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f5374616b696e67506f6f6c733a20746f6b656e20616c7265616479206861732060408201527f6120706f6f6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f5374616b696e67506f6f6c733a2077656967687473206c656e677468206d697360408201527f6d61746368000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b90815260200190565b60005b83811015611c7b578181015183820152602001611c63565b838111156114865750506000910152565b73ffffffffffffffffffffffffffffffffffffffff81168114610c9e57600080fdfea2646970667358221220de8fd1aff9f52d772780568178fabf6b4f5b11456f98f9e5aa464094d8fa874f64736f6c634300060c0033",
  "devdoc": {
    "details": "A contract which allows users to stake to farm tokens. This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this repository: https://github.com/sushiswap/sushiswap.",
    "kind": "dev",
    "methods": {
      "claim(uint256)": {
        "details": "Claims all rewarded tokens from a pool.",
        "params": {
          "_poolId": "The pool to claim rewards from."
        }
      },
      "createPool(address)": {
        "details": "Creates a new pool. The created pool will need to have its reward weight initialized before it begins generating rewards.",
        "params": {
          "_token": "The token the pool will accept for staking."
        },
        "returns": {
          "_0": "the identifier for the newly created pool."
        }
      },
      "deposit(uint256,uint256)": {
        "details": "Stakes tokens into a pool.",
        "params": {
          "_depositAmount": "the amount of tokens to deposit.",
          "_poolId": "the pool to deposit tokens into."
        }
      },
      "exit(uint256)": {
        "details": "Claims all rewards from a pool and then withdraws all staked tokens.",
        "params": {
          "_poolId": "the pool to exit from."
        }
      },
      "getPoolRewardRate(uint256)": {
        "details": "Gets the amount of tokens per block being distributed to stakers for a pool.",
        "params": {
          "_poolId": "the identifier of the pool."
        },
        "returns": {
          "_0": "the pool reward rate."
        }
      },
      "getPoolRewardWeight(uint256)": {
        "details": "Gets the reward weight of a pool which determines how much of the total rewards it receives per block.",
        "params": {
          "_poolId": "the identifier of the pool."
        },
        "returns": {
          "_0": "the pool reward weight."
        }
      },
      "getPoolToken(uint256)": {
        "details": "Gets the token a pool accepts.",
        "params": {
          "_poolId": "the identifier of the pool."
        },
        "returns": {
          "_0": "the token."
        }
      },
      "getPoolTotalDeposited(uint256)": {
        "details": "Gets the total amount of funds staked in a pool.",
        "params": {
          "_poolId": "the identifier of the pool."
        },
        "returns": {
          "_0": "the total amount of staked or deposited tokens."
        }
      },
      "getStakeTotalDeposited(address,uint256)": {
        "details": "Gets the number of tokens a user has staked into a pool.",
        "params": {
          "_account": "The account to query.",
          "_poolId": "the identifier of the pool."
        },
        "returns": {
          "_0": "the amount of deposited tokens."
        }
      },
      "getStakeTotalUnclaimed(address,uint256)": {
        "details": "Gets the number of unclaimed reward tokens a user can claim from a pool.",
        "params": {
          "_account": "The account to get the unclaimed balance of.",
          "_poolId": "The pool to check for unclaimed rewards."
        },
        "returns": {
          "_0": "the amount of unclaimed reward tokens a user has in a pool."
        }
      },
      "poolCount()": {
        "details": "Gets the number of pools that exist.",
        "returns": {
          "_0": "the pool count."
        }
      },
      "rewardRate()": {
        "details": "Gets the rate at which tokens are minted to stakers for all pools.",
        "returns": {
          "_0": "the reward rate."
        }
      },
      "setPendingGovernance(address)": {
        "details": "Sets the governance. This function can only called by the current governance.",
        "params": {
          "_pendingGovernance": "the new pending governance."
        }
      },
      "setRewardRate(uint256)": {
        "details": "Sets the distribution reward rate. This will update all of the pools.",
        "params": {
          "_rewardRate": "The number of tokens to distribute per second."
        }
      },
      "setRewardWeights(uint256[])": {
        "details": "Sets the reward weights of all of the pools.",
        "params": {
          "_rewardWeights": "The reward weights of all of the pools."
        }
      },
      "totalRewardWeight()": {
        "details": "Gets the total reward weight between all the pools.",
        "returns": {
          "_0": "the total reward weight."
        }
      },
      "withdraw(uint256,uint256)": {
        "details": "Withdraws staked tokens from a pool.",
        "params": {
          "_poolId": "The pool to withdraw staked tokens from.",
          "_withdrawAmount": "The number of tokens to withdraw."
        }
      }
    },
    "stateVariables": {
      "_ctx": {
        "details": "The context shared between the pools."
      },
      "_pools": {
        "details": "A list of all of the pools."
      },
      "_stakes": {
        "details": "A mapping of all of the user stakes mapped first by pool and then by address."
      },
      "governance": {
        "details": "The address of the account which currently has administrative capabilities over this contract."
      },
      "reward": {
        "details": "The token which will be minted as a reward for staking."
      },
      "tokenPoolIds": {
        "details": "Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool will return an identifier of zero."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(uint256)": {
        "notice": "use this function to claim the tokens from a corresponding pool by ID."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2082,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5624,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "reward",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMintableERC20)8054"
      },
      {
        "astId": 5627,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "governance",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5629,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "pendingGovernance",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5634,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "tokenPoolIds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_contract(IERC20)1268,t_uint256)"
      },
      {
        "astId": 5637,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "_ctx",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Context)9428_storage"
      },
      {
        "astId": 5640,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "_pools",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(List)9443_storage"
      },
      {
        "astId": 5647,
        "contract": "contracts/StakingPools.sol:StakingPools",
        "label": "_stakes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)9688_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Data)9439_storage)dyn_storage": {
        "base": "t_struct(Data)9439_storage",
        "encoding": "dynamic_array",
        "label": "struct Pool.Data[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1268": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableERC20)8054": {
        "encoding": "inplace",
        "label": "contract IMintableERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Data)9688_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Stake.Data))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Data)9688_storage)"
      },
      "t_mapping(t_contract(IERC20)1268,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1268",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Data)9688_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Stake.Data)",
        "numberOfBytes": "32",
        "value": "t_struct(Data)9688_storage"
      },
      "t_struct(Context)9428_storage": {
        "encoding": "inplace",
        "label": "struct Pool.Context",
        "members": [
          {
            "astId": 9425,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "rewardRate",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9427,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "totalRewardWeight",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Data)9439_storage": {
        "encoding": "inplace",
        "label": "struct Pool.Data",
        "members": [
          {
            "astId": 9430,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1268"
          },
          {
            "astId": 9432,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9434,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "rewardWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9436,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "accumulatedRewardWeight",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(FixedDecimal)8440_storage"
          },
          {
            "astId": 9438,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "lastUpdatedBlock",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Data)9688_storage": {
        "encoding": "inplace",
        "label": "struct Stake.Data",
        "members": [
          {
            "astId": 9683,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "totalDeposited",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9685,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "totalUnclaimed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9687,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "lastAccumulatedWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(FixedDecimal)8440_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(FixedDecimal)8440_storage": {
        "encoding": "inplace",
        "label": "struct FixedPointMath.FixedDecimal",
        "members": [
          {
            "astId": 8439,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(List)9443_storage": {
        "encoding": "inplace",
        "label": "struct Pool.List",
        "members": [
          {
            "astId": 9442,
            "contract": "contracts/StakingPools.sol:StakingPools",
            "label": "elements",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Data)9439_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}